type token =
  | IDENT of (string)
  | CST_CHAR of (string)
  | CST_INT of (string)
  | CST_FLOAT of (string)
  | CST_STRING of (string)
  | NAMED_TYPE of (string)
  | GNU_ATTRS of (Cabs.gnu_attrs)
  | EOF
  | CHAR
  | INT
  | DOUBLE
  | FLOAT
  | VOID
  | ENUM
  | STRUCT
  | TYPEDEF
  | UNION
  | SIGNED
  | UNSIGNED
  | LONG
  | SHORT
  | VOLATILE
  | EXTERN
  | STATIC
  | CONST
  | AUTO
  | REGISTER
  | RESTRICT
  | SIZEOF
  | ASM
  | EQ of (string * int)
  | PLUS_EQ of (string * int)
  | MINUS_EQ of (string * int)
  | STAR_EQ of (string * int)
  | SLASH_EQ of (string * int)
  | PERCENT_EQ of (string * int)
  | AND_EQ of (string * int)
  | PIPE_EQ of (string * int)
  | CIRC_EQ of (string * int)
  | INF_INF_EQ of (string * int)
  | SUP_SUP_EQ of (string * int)
  | ARROW
  | DOT
  | EQ_EQ
  | EXCLAM_EQ
  | INF
  | SUP
  | INF_EQ
  | SUP_EQ
  | PLUS
  | MINUS
  | STAR
  | SLASH
  | PERCENT
  | TILDE
  | AND
  | PIPE
  | CIRC
  | EXCLAM
  | AND_AND
  | PIPE_PIPE
  | INF_INF
  | SUP_SUP
  | PLUS_PLUS
  | MINUS_MINUS
  | RPAREN of (string * int)
  | LPAREN of (string * int)
  | RBRACE of (string * int)
  | LBRACE of (string * int)
  | LBRACKET of (string * int)
  | RBRACKET of (string * int)
  | COLON of (string * int)
  | SEMICOLON of (string * int)
  | COMMA of (string * int)
  | ELLIPSIS of (string * int)
  | QUEST of (string * int)
  | BREAK of (string * int)
  | CONTINUE of (string * int)
  | GOTO of (string * int)
  | RETURN of (string * int)
  | SWITCH of (string * int)
  | CASE of (string * int)
  | DEFAULT of (string * int)
  | WHILE of (string * int)
  | DO of (string * int)
  | FOR of (string * int)
  | IF of (string * int)
  | ELSE of (string * int)
  | ATTRIBUTE
  | EXTENSION
  | INLINE

open Parsing;;
let _ = parse_error;;
# 35 "cparser.mly"
open Cabs
let version = "Cparser V3.0b 10.9.99 Hugues Cassé"

let parse_error _ =
	Clexer.display_error "Syntax error" (Parsing.symbol_start ()) (Parsing.symbol_end ())

(*let fatal _ =
	Clexer.display_error "fatal error" (Parsing.symbol_start ()) (Parsing.symbol_end
	())*)


(*
** Type analysis
*)
type modifier =
	BASE_SIZE of size
	| BASE_SIGN of sign
	| BASE_STORAGE of storage
	| BASE_VOLATILE
	| BASE_CONST
	| BASE_GNU_ATTR of Cabs.gnu_attrs

let apply_mod (typ, sto) modi =
	let rec mod_root typ =
		match (typ, modi) with
		(NO_TYPE, BASE_SIGN sign) -> INT (NO_SIZE, sign)
		| (NO_TYPE, BASE_SIZE size) -> INT (size, NO_SIGN)
		| (CHAR NO_SIGN, BASE_SIGN sign) -> CHAR sign
		| (INT (NO_SIZE, sign), BASE_SIZE size) -> INT (size, sign)
		| (INT (LONG, sign), BASE_SIZE LONG) -> INT (LONG_LONG, sign)
		| (INT (size, NO_SIGN), BASE_SIGN sign) -> INT (size, sign)
		| (BITFIELD (NO_SIGN, exp), BASE_SIGN sign) -> BITFIELD (sign, exp)
		| (FLOAT false, BASE_SIZE LONG) -> FLOAT true
		| (DOUBLE false, BASE_SIZE LONG) -> DOUBLE true
		| (PTR typ, _) -> PTR (mod_root typ)
		| (CONST typ, _) -> CONST (mod_root typ)
		| (VOLATILE typ, _) -> VOLATILE (mod_root typ)
		| (GNU_TYPE (attrs, typ), _) -> GNU_TYPE (attrs, mod_root typ)
		| (TYPE_LINE (f, l, t), _) -> TYPE_LINE (f, l, mod_root t)
		| _ -> raise BadModifier in
	let check_access typ =
		match typ with
		PROTO _ | OLD_PROTO _ | CONST _ | VOLATILE _ -> false
		| _ -> true in
	match modi with
	  BASE_SIGN _ -> (mod_root typ, sto)
	| BASE_SIZE _ -> (mod_root typ, sto)
	| BASE_CONST ->
		if (check_access typ) then (CONST typ, sto)
		else raise BadModifier
	| BASE_VOLATILE ->
		if (check_access typ) then (VOLATILE typ, sto)
		else raise BadModifier
	| BASE_STORAGE sto' ->
		if sto = NO_STORAGE then (typ, sto')
		else raise BadModifier
	| BASE_GNU_ATTR attrs ->
		(GNU_TYPE (attrs, typ), sto)

let apply_mods mods fty =
	List.fold_left apply_mod fty mods

let set_type tst tin =
	let rec set typ =
		match typ with
		NO_TYPE -> tst
		| PTR typ -> PTR (set typ)
		| RESTRICT_PTR typ -> RESTRICT_PTR (set typ)
		| ARRAY (typ, dim) -> ARRAY (set typ, dim)
		| PROTO (typ, pars, ell) -> PROTO (set typ, pars, ell)
		| OLD_PROTO (typ, pars, ell) -> OLD_PROTO (set typ, pars, ell)
		| CONST typ -> CONST (set typ)
		| VOLATILE typ -> VOLATILE (set typ)
		| TYPE_LINE (f, l, t) -> TYPE_LINE (f, l, set t)
		| BITFIELD (NO_SIGN, exp) ->
			(match tst with
				INT (_, sign) -> BITFIELD (sign, exp)
				| _ -> raise BadType)
		| _ -> raise BadType in
	set tin


(*
** Expression building 
*)
let smooth_expression lst =
	match lst with
		[] -> NOTHING
		| [expr] -> expr
		| _ -> COMMA (List.rev lst)
let list_expression expr =
	match expr with
		COMMA lst -> lst
		| NOTHING -> []
		| _ -> [expr]


(*** Named Building ***)
let set_name (typ : base_type) (id, typ', attr, exp) =
	(id, set_type typ typ', attr, exp)
	
let set_name_group (typ, sto) (lst : name list)
: name_group =
	(typ, sto, List.map (set_name typ) lst)
	
let set_single (typ, sto) name : single_name =
	(typ, sto, set_name typ name)

let set_data (id, typ, attr, _) ini = (id, typ, attr, ini)

let apply_qual ((t1, q1) : base_type * modifier list)
			   ((t2, q2) : base_type * modifier list)
			   : base_type * modifier list =
	((if t1 = NO_TYPE then t2 else
		if t2 = NO_TYPE then t1 else  raise BadModifier),
	List.append q1 q2)

(*** Line management ***)
let set_line (file, line) stat =
	if Clexer.linerec !Clexer.current_handle
	then Cabs.STAT_LINE (stat, file, line)
	else stat

let set_eline (file, line) expr =
	if Clexer.linerec !Clexer.current_handle
	then Cabs.EXPR_LINE (expr, file, line)
	else expr

let set_tline _type =
	if Clexer.linerec !Clexer.current_handle
	then Cabs.TYPE_LINE (Clexer.curfile (), Clexer.curline(), _type)
	else _type

# 231 "cparser.ml"
let yytransl_const = [|
    0 (* EOF *);
  264 (* CHAR *);
  265 (* INT *);
  266 (* DOUBLE *);
  267 (* FLOAT *);
  268 (* VOID *);
  269 (* ENUM *);
  270 (* STRUCT *);
  271 (* TYPEDEF *);
  272 (* UNION *);
  273 (* SIGNED *);
  274 (* UNSIGNED *);
  275 (* LONG *);
  276 (* SHORT *);
  277 (* VOLATILE *);
  278 (* EXTERN *);
  279 (* STATIC *);
  280 (* CONST *);
  281 (* AUTO *);
  282 (* REGISTER *);
  283 (* RESTRICT *);
  284 (* SIZEOF *);
  285 (* ASM *);
  297 (* ARROW *);
  298 (* DOT *);
  299 (* EQ_EQ *);
  300 (* EXCLAM_EQ *);
  301 (* INF *);
  302 (* SUP *);
  303 (* INF_EQ *);
  304 (* SUP_EQ *);
  305 (* PLUS *);
  306 (* MINUS *);
  307 (* STAR *);
  308 (* SLASH *);
  309 (* PERCENT *);
  310 (* TILDE *);
  311 (* AND *);
  312 (* PIPE *);
  313 (* CIRC *);
  314 (* EXCLAM *);
  315 (* AND_AND *);
  316 (* PIPE_PIPE *);
  317 (* INF_INF *);
  318 (* SUP_SUP *);
  319 (* PLUS_PLUS *);
  320 (* MINUS_MINUS *);
  344 (* ATTRIBUTE *);
  345 (* EXTENSION *);
  346 (* INLINE *);
    0|]

let yytransl_block = [|
  257 (* IDENT *);
  258 (* CST_CHAR *);
  259 (* CST_INT *);
  260 (* CST_FLOAT *);
  261 (* CST_STRING *);
  262 (* NAMED_TYPE *);
  263 (* GNU_ATTRS *);
  286 (* EQ *);
  287 (* PLUS_EQ *);
  288 (* MINUS_EQ *);
  289 (* STAR_EQ *);
  290 (* SLASH_EQ *);
  291 (* PERCENT_EQ *);
  292 (* AND_EQ *);
  293 (* PIPE_EQ *);
  294 (* CIRC_EQ *);
  295 (* INF_INF_EQ *);
  296 (* SUP_SUP_EQ *);
  321 (* RPAREN *);
  322 (* LPAREN *);
  323 (* RBRACE *);
  324 (* LBRACE *);
  325 (* LBRACKET *);
  326 (* RBRACKET *);
  327 (* COLON *);
  328 (* SEMICOLON *);
  329 (* COMMA *);
  330 (* ELLIPSIS *);
  331 (* QUEST *);
  332 (* BREAK *);
  333 (* CONTINUE *);
  334 (* GOTO *);
  335 (* RETURN *);
  336 (* SWITCH *);
  337 (* CASE *);
  338 (* DEFAULT *);
  339 (* WHILE *);
  340 (* DO *);
  341 (* FOR *);
  342 (* IF *);
  343 (* ELSE *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\004\000\004\000\004\000\
\004\000\004\000\004\000\005\000\005\000\005\000\005\000\007\000\
\007\000\008\000\008\000\009\000\009\000\009\000\009\000\009\000\
\006\000\006\000\006\000\010\000\010\000\011\000\011\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\035\000\036\000\044\000\044\000\
\045\000\045\000\045\000\037\000\037\000\046\000\047\000\047\000\
\047\000\049\000\049\000\049\000\050\000\050\000\050\000\050\000\
\048\000\048\000\051\000\052\000\052\000\052\000\052\000\052\000\
\052\000\052\000\052\000\052\000\013\000\014\000\014\000\014\000\
\016\000\016\000\017\000\017\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\015\000\015\000\015\000\019\000\019\000\
\020\000\020\000\021\000\021\000\021\000\021\000\021\000\021\000\
\021\000\021\000\021\000\021\000\021\000\021\000\038\000\038\000\
\038\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
\053\000\053\000\053\000\054\000\054\000\054\000\054\000\039\000\
\039\000\055\000\056\000\056\000\056\000\056\000\056\000\056\000\
\056\000\056\000\056\000\056\000\056\000\057\000\057\000\058\000\
\059\000\059\000\059\000\061\000\061\000\063\000\063\000\064\000\
\064\000\064\000\062\000\062\000\062\000\060\000\060\000\065\000\
\066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
\066\000\066\000\066\000\066\000\066\000\066\000\033\000\033\000\
\033\000\067\000\067\000\068\000\069\000\069\000\069\000\071\000\
\071\000\073\000\073\000\074\000\074\000\074\000\074\000\072\000\
\072\000\072\000\072\000\072\000\072\000\070\000\075\000\075\000\
\075\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
\075\000\075\000\076\000\077\000\077\000\077\000\079\000\079\000\
\080\000\080\000\080\000\081\000\081\000\082\000\082\000\082\000\
\078\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
\083\000\083\000\083\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\042\000\041\000\041\000\041\000\041\000\
\041\000\041\000\041\000\041\000\041\000\084\000\084\000\085\000\
\085\000\086\000\086\000\029\000\029\000\032\000\032\000\032\000\
\030\000\030\000\031\000\031\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
\028\000\027\000\027\000\027\000\027\000\034\000\034\000\087\000\
\088\000\023\000\089\000\089\000\090\000\090\000\025\000\025\000\
\026\000\026\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\024\000\024\000\091\000\093\000\093\000\
\094\000\094\000\092\000\092\000\095\000\095\000\043\000\043\000\
\022\000\022\000\040\000\040\000\040\000\096\000\096\000\097\000\
\097\000\098\000\098\000\098\000\099\000\099\000\000\000\000\000"

let yylen = "\002\000\
\002\000\000\000\001\000\001\000\002\000\003\000\003\000\004\000\
\002\000\004\000\005\000\002\000\003\000\003\000\001\000\000\000\
\001\000\001\000\002\000\001\000\001\000\001\000\001\000\001\000\
\001\000\002\000\002\000\001\000\003\000\002\000\004\000\001\000\
\003\000\002\000\003\000\003\000\003\000\003\000\004\000\003\000\
\004\000\006\000\004\000\006\000\002\000\002\000\001\000\002\000\
\001\000\003\000\003\000\001\000\002\000\003\000\003\000\003\000\
\002\000\000\000\001\000\001\000\001\000\002\000\002\000\002\000\
\001\000\003\000\001\000\001\000\002\000\003\000\003\000\004\000\
\003\000\004\000\006\000\003\000\003\000\002\000\003\000\003\000\
\000\000\001\000\001\000\002\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\002\000\002\000\001\000\003\000\
\002\000\004\000\001\000\001\000\002\000\003\000\003\000\003\000\
\003\000\004\000\003\000\004\000\006\000\003\000\001\000\002\000\
\002\000\001\000\001\000\001\000\001\000\002\000\002\000\002\000\
\002\000\002\000\002\000\001\000\002\000\002\000\002\000\001\000\
\003\000\002\000\001\000\002\000\003\000\003\000\003\000\003\000\
\004\000\003\000\004\000\006\000\003\000\002\000\001\000\003\000\
\002\000\003\000\003\000\000\000\001\000\001\000\002\000\001\000\
\001\000\001\000\001\000\002\000\002\000\003\000\001\000\001\000\
\000\000\001\000\001\000\002\000\003\000\003\000\003\000\003\000\
\004\000\003\000\004\000\006\000\003\000\003\000\000\000\001\000\
\003\000\003\000\001\000\002\000\003\000\003\000\002\000\000\000\
\001\000\001\000\002\000\001\000\001\000\001\000\001\000\001\000\
\002\000\002\000\002\000\002\000\002\000\001\000\000\000\001\000\
\001\000\002\000\003\000\003\000\003\000\003\000\004\000\003\000\
\006\000\003\000\002\000\002\000\003\000\003\000\000\000\001\000\
\001\000\002\000\002\000\001\000\002\000\001\000\001\000\001\000\
\001\000\000\000\002\000\003\000\003\000\003\000\003\000\004\000\
\003\000\006\000\003\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\002\000\004\000\005\000\002\000\
\004\000\005\000\002\000\004\000\005\000\001\000\001\000\001\000\
\003\000\001\000\003\000\003\000\001\000\001\000\003\000\002\000\
\000\000\001\000\001\000\003\000\001\000\001\000\002\000\004\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\003\000\003\000\003\000\003\000\003\000\003\000\
\004\000\004\000\004\000\005\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\001\000\001\000\001\000\001\000\001\000\002\000\001\000\
\002\000\003\000\000\000\001\000\001\000\002\000\000\000\001\000\
\001\000\002\000\001\000\002\000\001\000\005\000\007\000\005\000\
\005\000\007\000\009\000\003\000\004\000\003\000\002\000\003\000\
\002\000\002\000\003\000\005\000\008\000\002\000\001\000\003\000\
\004\000\007\000\000\000\002\000\001\000\003\000\000\000\001\000\
\001\000\002\000\006\000\001\000\001\000\000\000\001\000\001\000\
\003\000\001\000\001\000\004\000\001\000\001\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\022\000\023\000\020\000\021\000\
\000\000\116\001\117\001\127\001\000\000\000\000\004\000\000\000\
\000\000\000\000\018\000\000\000\128\001\000\000\000\000\237\000\
\238\000\240\000\239\000\236\000\000\000\000\000\000\000\243\000\
\244\000\241\000\242\000\000\000\000\000\000\000\000\000\124\000\
\111\000\000\000\000\000\001\000\005\000\032\000\000\000\000\000\
\009\000\000\000\028\000\000\000\000\000\000\000\000\000\000\000\
\000\000\025\000\019\000\024\000\000\000\123\000\122\000\119\000\
\118\000\254\000\255\000\000\000\000\000\000\000\000\000\000\000\
\000\000\113\000\112\000\131\000\000\000\000\000\000\000\128\000\
\000\000\121\000\120\000\127\000\126\000\125\000\000\000\000\000\
\000\000\000\000\000\000\000\000\113\001\000\000\006\000\000\000\
\000\000\000\000\000\000\000\000\072\001\007\000\000\000\059\000\
\060\000\000\000\052\000\000\000\000\000\014\000\027\000\026\000\
\013\000\000\000\000\000\000\000\000\001\000\000\153\000\152\000\
\154\000\000\000\143\000\000\000\000\000\000\000\150\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\010\000\000\000\000\000\000\000\130\000\125\001\068\001\066\001\
\067\001\070\001\126\001\123\001\000\000\000\000\000\000\120\001\
\000\000\000\000\000\000\000\000\000\000\114\001\000\000\029\000\
\000\000\049\000\190\000\188\000\189\000\000\000\191\000\000\000\
\000\000\000\000\179\000\000\000\000\000\000\000\186\000\014\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\040\000\013\001\000\000\000\000\000\000\088\000\
\090\000\085\000\087\000\086\000\089\000\077\001\000\000\000\000\
\000\000\083\000\091\000\000\000\000\000\000\000\008\000\053\000\
\068\000\000\000\000\000\000\000\065\000\000\000\000\000\000\000\
\061\000\000\000\000\000\000\000\252\000\000\000\000\000\246\000\
\142\000\000\000\163\000\000\000\000\000\000\000\159\000\000\000\
\000\000\000\000\155\000\000\000\151\000\000\000\249\000\000\000\
\000\000\000\000\000\000\000\000\000\000\129\000\000\000\138\000\
\000\000\071\001\000\000\000\000\000\000\000\000\000\000\041\000\
\043\000\000\000\048\000\000\000\200\000\201\000\000\000\000\000\
\180\000\000\000\000\000\000\000\192\000\000\000\187\000\000\000\
\015\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\223\000\222\000\000\000\000\000\224\000\000\000\000\000\
\000\000\000\000\220\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\024\001\026\001\000\000\000\000\000\000\039\000\
\000\000\000\000\000\000\031\000\099\000\100\000\000\000\000\000\
\000\000\095\000\000\000\000\000\000\000\000\000\092\000\084\000\
\074\001\000\000\000\000\083\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\085\001\
\081\001\073\001\000\000\000\000\078\001\000\000\000\000\000\000\
\000\000\054\000\000\000\000\000\000\000\055\000\056\000\063\000\
\064\000\062\000\011\000\000\000\001\001\253\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\144\000\000\000\000\000\
\000\000\147\000\146\000\156\000\157\000\247\000\250\000\000\000\
\139\000\137\000\115\001\121\001\000\000\000\000\000\000\050\000\
\051\000\177\000\178\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\181\000\182\000\196\000\194\000\195\000\197\000\
\193\000\000\000\031\001\032\001\000\000\000\000\000\000\211\000\
\000\000\000\000\000\000\217\000\000\000\221\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\027\001\028\001\029\001\030\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\006\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\077\000\000\000\000\000\000\000\
\000\000\080\000\094\000\093\000\079\000\000\000\000\000\097\001\
\098\001\000\000\095\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\082\001\084\001\000\000\000\000\000\000\
\066\000\000\000\073\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\158\000\000\000\170\000\000\000\000\000\124\001\
\042\000\044\000\000\000\000\000\000\000\000\000\000\000\208\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\214\000\213\000\218\000\219\000\034\001\035\001\
\000\000\004\001\000\000\000\000\000\000\000\000\000\000\000\000\
\096\000\000\000\107\000\000\000\000\000\092\001\000\000\099\001\
\096\001\000\000\000\000\094\001\000\000\000\000\000\000\000\000\
\000\000\074\000\072\000\000\000\171\000\169\000\140\000\000\000\
\207\000\000\000\000\000\000\000\000\000\000\000\233\000\000\000\
\000\000\007\001\000\000\108\000\106\000\098\000\000\000\000\000\
\000\000\000\000\093\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\232\000\000\000\100\001\000\000\000\000\
\000\000\103\001\000\000\088\001\089\001\000\000\000\000\000\000\
\075\000\172\000\209\000\000\000\109\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\234\000\000\000\000\000\
\104\001\109\001\000\000\000\000\090\001\000\000\087\001\105\001\
\000\000\000\000\101\001\000\000\000\000\110\001\091\001\000\000\
\106\001"

let yydgoto = "\003\000\
\012\000\013\000\014\000\015\000\016\000\056\000\017\000\018\000\
\019\000\050\000\051\000\052\000\198\000\199\000\085\001\200\000\
\201\000\202\000\081\001\082\001\083\001\099\000\104\001\105\001\
\106\001\107\001\188\000\189\000\076\001\216\001\108\001\222\001\
\166\000\149\000\053\000\054\000\106\000\038\000\079\000\167\000\
\039\000\040\000\100\000\168\000\169\000\107\000\108\000\212\000\
\109\000\218\000\213\000\214\000\041\000\042\000\080\000\081\000\
\122\000\123\000\124\000\230\000\125\000\236\000\126\000\127\000\
\231\000\232\000\170\000\171\000\172\000\009\001\173\000\014\001\
\174\000\175\000\010\001\031\001\032\001\176\001\033\001\181\001\
\034\001\035\001\177\001\069\000\116\000\117\000\103\000\204\000\
\205\000\206\000\089\002\122\002\105\002\106\002\131\002\150\000\
\151\000\152\000\153\000"

let yysindex = "\130\000\
\156\001\156\001\000\000\221\013\000\000\000\000\000\000\000\000\
\075\255\000\000\000\000\000\000\082\000\156\001\000\000\201\255\
\110\013\131\001\000\000\169\255\000\000\220\255\244\255\000\000\
\000\000\000\000\000\000\000\000\035\255\058\255\067\255\000\000\
\000\000\000\000\000\000\225\014\225\014\044\255\129\000\000\000\
\000\000\063\013\147\255\000\000\000\000\000\000\093\255\092\255\
\000\000\026\000\000\000\071\001\195\255\177\255\131\001\031\001\
\131\001\000\000\000\000\000\000\221\013\000\000\000\000\000\000\
\000\000\000\000\000\000\253\255\202\255\160\001\012\000\160\001\
\125\000\000\000\000\000\000\000\076\000\044\255\097\000\000\000\
\136\003\000\000\000\000\000\000\000\000\000\000\162\014\092\255\
\092\255\092\255\021\001\045\000\000\000\053\255\000\000\092\255\
\150\000\069\005\153\001\215\255\000\000\000\000\252\002\000\000\
\000\000\087\255\000\000\100\255\001\015\000\000\000\000\000\000\
\000\000\044\255\035\000\046\000\000\000\253\255\000\000\000\000\
\000\000\016\255\000\000\026\255\016\015\160\001\000\000\160\001\
\071\000\160\001\044\255\044\255\044\255\213\000\073\001\129\001\
\000\000\044\255\142\003\087\005\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\211\000\156\000\159\000\000\000\
\157\000\021\001\021\001\021\001\021\001\000\000\177\000\000\000\
\071\001\000\000\000\000\000\000\000\000\207\000\000\000\217\000\
\220\000\216\000\000\000\225\255\031\015\142\003\000\000\000\000\
\011\007\029\007\029\007\029\007\029\007\029\007\029\007\029\007\
\029\007\142\001\000\000\000\000\205\008\005\002\195\006\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\038\000\046\015\
\252\002\000\000\000\000\255\000\011\003\252\002\000\000\000\000\
\000\000\174\255\100\255\225\001\000\000\019\002\177\255\177\255\
\000\000\238\014\028\002\029\007\000\000\253\255\064\000\000\000\
\000\000\253\000\000\000\057\255\026\255\034\002\000\000\145\002\
\160\001\160\001\000\000\158\004\000\000\177\003\000\000\032\004\
\073\001\073\001\073\001\073\001\212\000\000\000\013\001\000\000\
\182\002\000\000\024\001\162\014\162\014\150\000\215\255\000\000\
\000\000\069\255\000\000\099\003\000\000\000\000\254\255\225\255\
\000\000\046\001\142\003\142\003\000\000\025\003\000\000\142\001\
\000\000\221\003\221\003\060\000\060\000\060\000\060\000\060\000\
\060\000\000\000\000\000\093\001\186\255\000\000\102\001\064\255\
\061\015\247\001\000\000\029\007\029\007\029\007\029\007\029\007\
\029\007\029\007\029\007\029\007\029\007\029\007\198\255\241\255\
\029\007\029\007\029\007\029\007\029\007\029\007\029\007\029\007\
\029\007\029\007\029\007\029\007\029\007\029\007\029\007\029\007\
\029\007\029\007\000\000\000\000\029\007\029\007\029\007\000\000\
\029\007\195\006\205\008\000\000\000\000\000\000\224\000\038\000\
\094\002\000\000\247\003\252\002\153\002\252\002\000\000\000\000\
\000\000\098\001\110\001\000\000\113\001\143\001\200\001\050\005\
\162\001\029\007\198\001\187\001\011\003\196\001\209\001\000\000\
\000\000\000\000\011\003\155\002\000\000\100\255\100\255\019\002\
\058\002\000\000\100\255\142\003\157\005\000\000\000\000\000\000\
\000\000\000\000\000\000\205\008\000\000\000\000\029\007\026\255\
\026\255\026\255\073\255\145\002\136\002\000\000\026\255\142\003\
\175\005\000\000\000\000\000\000\000\000\000\000\000\000\142\003\
\000\000\000\000\000\000\000\000\227\001\234\001\245\001\000\000\
\000\000\000\000\000\000\225\255\225\255\225\255\168\255\046\001\
\221\254\245\005\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\004\002\000\000\000\000\029\007\255\254\064\255\000\000\
\044\002\247\001\247\001\000\000\175\004\000\000\205\008\205\008\
\205\008\205\008\205\008\205\008\205\008\205\008\205\008\205\008\
\205\008\000\000\000\000\000\000\000\000\135\014\135\014\161\014\
\161\014\161\014\161\014\221\003\221\003\060\000\060\000\060\000\
\109\014\051\014\080\014\022\014\249\013\070\006\070\006\063\002\
\108\002\210\002\092\007\205\008\000\000\174\000\038\000\038\000\
\038\000\185\002\028\000\168\002\000\000\038\000\142\003\007\006\
\183\002\000\000\000\000\000\000\000\000\011\003\233\002\000\000\
\000\000\143\002\000\000\021\008\029\007\067\008\011\003\029\007\
\146\002\029\007\029\007\000\000\000\000\019\002\019\002\174\002\
\000\000\191\002\000\000\224\002\205\008\145\002\145\002\145\002\
\145\002\180\002\000\000\217\002\000\000\250\002\223\002\000\000\
\000\000\000\000\046\001\046\001\046\001\046\001\184\002\000\000\
\008\003\040\007\060\000\064\255\064\255\064\255\055\000\044\002\
\048\001\077\006\000\000\000\000\000\000\000\000\000\000\000\000\
\029\007\000\000\195\006\185\002\185\002\185\002\185\002\249\002\
\000\000\238\002\000\000\077\003\195\006\000\000\001\255\000\000\
\000\000\209\255\011\003\000\000\219\255\253\002\254\002\075\000\
\142\003\000\000\000\000\142\003\000\000\000\000\000\000\142\003\
\000\000\044\002\044\002\044\002\044\002\002\003\000\000\079\003\
\214\013\000\000\142\003\000\000\000\000\000\000\004\003\038\255\
\009\003\011\003\000\000\011\003\029\007\029\007\011\003\017\003\
\034\003\042\003\142\003\000\000\052\003\000\000\053\003\120\003\
\066\003\000\000\072\003\000\000\000\000\102\000\073\003\075\003\
\000\000\000\000\000\000\102\003\000\000\029\007\140\003\038\255\
\167\003\132\003\146\003\029\007\011\003\000\000\113\008\223\003\
\000\000\000\000\161\003\164\003\000\000\187\003\000\000\000\000\
\188\003\253\003\000\000\011\003\029\007\000\000\000\000\159\008\
\000\000"

let yyrindex = "\000\000\
\249\000\063\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\042\000\000\000\000\000\
\090\000\030\005\000\000\085\001\000\000\221\255\237\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\226\000\000\000\
\000\000\099\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\078\006\000\000\076\015\059\001\060\001\
\059\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\201\001\091\015\212\001\091\015\
\026\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\237\002\000\000\000\000\000\000\000\000\000\000\199\003\000\000\
\000\000\000\000\118\003\000\000\000\000\000\000\000\000\000\000\
\010\006\000\000\146\006\169\006\000\000\000\000\054\002\000\000\
\000\000\076\015\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\179\000\000\000\000\000\000\000\000\000\000\000\
\000\000\091\015\000\000\081\255\000\000\200\004\000\000\091\015\
\091\015\091\015\000\000\000\000\000\000\000\000\081\003\000\000\
\000\000\000\000\010\006\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\139\007\000\000\214\003\000\000\
\218\000\203\003\229\003\058\004\084\004\000\000\092\003\000\000\
\245\254\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\215\003\217\003\000\000\145\255\000\000\220\004\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\106\015\000\000\000\000\215\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\216\006\000\000\000\000\000\000\219\003\140\002\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\083\003\137\001\137\001\
\000\000\163\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\021\002\000\000\182\001\191\001\000\000\000\000\106\003\
\162\000\162\000\000\000\061\001\000\000\091\015\000\000\091\015\
\086\003\216\003\044\004\070\004\239\002\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\199\003\010\006\121\003\000\000\
\000\000\000\000\000\000\121\015\000\000\000\000\145\255\217\001\
\000\000\051\001\019\001\019\001\000\000\117\001\000\000\106\015\
\000\000\199\010\245\010\251\008\041\009\087\009\133\009\179\009\
\225\009\000\000\000\000\000\000\000\000\000\000\000\000\060\002\
\000\000\099\007\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\218\003\000\000\000\000\000\000\
\000\000\000\000\236\254\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\245\254\039\000\106\000\039\000\000\000\000\000\
\000\000\231\007\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\228\003\000\000\000\000\000\000\000\000\074\000\
\000\000\000\000\000\000\010\006\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\055\001\000\000\000\000\000\000\182\001\
\182\001\182\001\182\001\164\000\000\000\000\000\081\255\010\006\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\010\006\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\145\255\145\255\145\255\145\255\244\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\060\002\060\002\000\000\
\231\003\146\255\146\255\000\000\205\000\000\000\214\002\211\004\
\189\005\136\006\208\006\237\006\127\012\173\012\215\012\112\013\
\077\015\000\000\000\000\000\000\000\000\147\012\193\012\219\011\
\009\012\055\012\101\012\035\011\081\011\015\010\061\010\107\010\
\239\012\075\013\029\013\121\013\135\013\127\011\173\011\000\000\
\215\254\000\000\000\000\139\001\000\000\000\000\000\000\000\000\
\000\000\170\004\000\000\000\000\000\000\000\000\010\006\000\000\
\123\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\226\003\000\000\000\000\000\000\076\001\024\002\207\001\
\000\000\000\000\000\000\000\000\115\002\241\002\068\003\112\003\
\127\003\127\002\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\011\002\037\002\046\002\082\002\155\255\000\000\
\000\000\185\007\153\010\060\002\060\002\060\002\060\002\234\003\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\089\001\082\005\101\005\110\005\163\005\250\004\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\010\006\000\000\000\000\010\006\000\000\000\000\000\000\010\006\
\000\000\235\003\238\003\242\003\243\003\128\002\000\000\000\000\
\181\013\000\000\010\006\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\226\003\000\000\000\000\
\000\000\000\000\010\006\000\000\000\000\000\000\000\000\000\000\
\044\000\000\000\245\003\000\000\000\000\000\000\000\000\181\002\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\218\003\000\000\000\000\000\000\000\000\
\000\000\000\000\246\003\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000"

let yygindex = "\000\000\
\000\000\056\005\000\000\045\005\000\000\000\000\065\001\000\000\
\011\000\000\000\225\004\169\002\123\004\000\000\000\000\095\000\
\000\000\071\255\000\000\109\003\225\254\214\255\207\255\158\254\
\000\000\000\000\176\255\146\000\193\254\018\254\160\255\000\000\
\150\255\000\000\000\000\000\000\000\000\024\005\228\004\255\255\
\247\255\043\000\181\255\089\004\000\000\239\004\000\000\000\000\
\244\003\000\000\232\003\060\255\214\004\000\000\223\004\162\002\
\037\000\152\255\000\000\000\000\023\004\000\000\000\000\158\255\
\227\003\049\255\000\000\103\004\000\000\000\000\249\003\000\000\
\000\000\193\004\031\255\096\004\000\000\000\000\091\003\000\000\
\000\000\232\254\178\254\247\004\251\004\149\004\000\000\000\000\
\000\000\000\000\029\003\000\000\000\000\255\002\000\000\127\004\
\000\000\129\004\000\000"

let yytablesize = 4246
let yytable = "\020\000\
\020\000\190\000\249\001\102\000\092\000\141\000\148\000\057\000\
\252\001\182\001\221\001\063\002\020\000\112\001\113\001\088\001\
\060\000\225\000\111\001\028\002\132\001\133\001\029\002\010\001\
\225\000\030\002\226\000\237\000\059\000\023\002\010\001\227\000\
\247\000\162\001\134\000\066\000\119\000\160\001\161\001\120\000\
\067\000\003\000\103\002\249\000\076\000\093\000\005\001\226\001\
\228\001\174\001\093\000\005\001\005\001\060\000\060\000\060\000\
\207\000\226\000\066\000\058\000\111\001\111\001\227\000\067\000\
\175\001\087\002\111\000\066\000\121\000\152\001\121\000\088\002\
\067\000\226\000\153\001\093\000\228\000\128\001\227\000\093\000\
\129\001\044\000\224\000\130\001\086\000\255\000\009\000\010\000\
\011\000\029\001\158\000\229\000\046\000\046\000\077\000\032\002\
\033\002\158\000\112\000\216\000\209\000\203\000\068\000\009\000\
\010\000\011\000\104\002\228\000\129\000\078\000\104\000\111\002\
\105\000\088\000\174\001\234\000\089\000\159\000\097\000\090\000\
\121\000\098\000\229\000\228\000\121\000\070\000\121\000\121\000\
\121\000\175\001\001\000\002\000\158\000\225\000\072\000\225\000\
\028\001\141\001\229\000\054\002\043\000\134\002\047\000\047\000\
\009\000\010\000\011\000\150\001\060\002\161\000\210\000\217\000\
\161\000\161\000\101\000\235\001\038\002\048\000\048\000\093\000\
\009\000\010\000\011\000\012\001\238\000\211\000\240\000\235\000\
\005\001\254\001\255\001\148\000\148\000\006\001\209\000\029\001\
\006\002\007\002\008\002\009\002\009\000\010\000\011\000\061\000\
\030\001\131\001\019\002\020\002\021\002\022\002\086\001\044\002\
\045\002\046\002\110\001\047\002\215\000\111\001\194\001\203\000\
\104\000\046\000\105\000\195\001\203\000\074\002\075\002\076\002\
\077\002\199\000\215\000\215\000\087\000\199\000\215\000\013\001\
\091\002\199\000\007\001\210\000\159\001\117\000\028\001\210\000\
\210\000\005\001\093\000\210\000\217\001\218\001\006\001\121\000\
\121\000\008\001\121\000\082\002\121\000\114\000\121\000\211\000\
\062\000\196\001\087\001\063\000\191\000\086\002\197\001\108\002\
\002\000\109\002\172\001\047\000\112\002\115\000\005\001\009\000\
\010\000\011\000\073\001\006\001\122\001\093\000\101\000\233\001\
\064\000\002\002\048\000\065\000\168\001\118\000\030\001\117\000\
\049\000\090\002\156\001\007\001\004\002\157\001\140\001\179\001\
\158\001\073\001\135\002\092\002\077\001\012\002\117\000\114\000\
\030\001\078\001\008\001\073\001\227\001\015\002\077\001\081\000\
\014\002\143\002\016\000\078\001\081\000\046\000\114\000\016\000\
\007\001\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\169\001\016\000\016\000\016\000\016\000\016\000\002\000\008\001\
\220\000\025\002\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\180\001\076\000\093\000\079\001\128\000\
\075\001\093\000\203\000\203\000\203\000\009\000\010\000\011\000\
\079\001\081\000\015\000\119\000\016\000\080\001\120\000\047\000\
\131\000\095\000\096\000\132\000\047\001\048\001\133\000\080\001\
\081\000\174\001\078\000\016\000\102\001\124\001\048\000\078\000\
\221\000\016\000\102\001\009\000\010\000\011\000\222\000\110\000\
\175\001\113\000\067\001\068\001\050\002\069\001\077\000\236\001\
\070\001\158\000\126\001\031\002\009\000\010\000\011\000\052\002\
\222\000\239\000\069\000\095\002\015\000\078\000\009\000\010\000\
\011\000\069\000\069\000\073\001\058\002\082\000\162\000\061\002\
\083\000\217\001\064\002\015\000\078\000\158\000\009\000\010\000\
\011\000\015\000\148\000\009\000\010\000\011\000\123\002\148\000\
\137\000\138\000\163\000\078\000\093\000\164\000\073\001\165\000\
\030\001\030\001\234\001\030\001\237\001\183\001\184\001\185\001\
\186\001\187\001\188\001\189\001\190\001\191\001\192\001\193\001\
\130\000\080\002\198\001\199\001\200\001\201\001\202\001\203\001\
\204\001\205\001\206\001\207\001\208\001\209\001\210\001\211\001\
\212\001\213\001\214\001\215\001\148\000\076\000\096\002\250\000\
\219\001\097\002\220\001\075\001\251\000\098\002\253\000\037\002\
\077\001\158\000\115\000\148\000\164\000\078\001\148\000\252\000\
\101\002\148\000\148\000\164\000\164\000\009\000\010\000\011\000\
\042\002\244\001\254\000\246\001\223\001\002\001\043\002\224\001\
\116\002\016\000\225\001\002\001\110\002\217\001\016\000\212\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\077\000\
\016\000\016\000\016\000\016\000\016\000\212\000\212\000\000\001\
\005\002\212\000\079\001\184\000\115\000\144\001\078\000\011\001\
\184\000\001\001\122\001\217\001\011\001\158\000\011\001\011\001\
\004\001\080\001\122\001\115\000\002\001\003\001\024\000\025\000\
\026\000\027\000\028\000\016\000\009\000\010\000\011\000\032\000\
\033\000\034\000\035\000\005\000\006\000\007\000\008\000\009\000\
\010\000\011\000\016\000\016\000\012\000\145\000\027\002\016\000\
\016\000\089\001\145\000\127\001\016\000\184\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\145\001\016\000\016\000\
\016\000\016\000\016\000\184\000\184\000\024\000\097\000\184\000\
\147\001\098\000\024\000\184\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\116\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\024\000\024\000\016\000\012\000\145\000\
\078\002\016\000\162\001\198\000\034\002\183\000\009\000\010\000\
\011\000\003\001\183\000\198\000\016\000\012\000\145\000\003\001\
\016\000\145\000\016\000\012\000\145\000\145\000\016\000\024\000\
\097\000\058\000\139\000\098\000\071\000\140\000\176\000\143\000\
\144\000\145\000\146\000\071\000\071\000\116\000\024\000\005\000\
\006\000\007\000\008\000\008\001\024\000\171\001\009\000\010\000\
\011\000\008\001\026\001\057\000\116\000\027\001\173\001\183\000\
\238\001\177\000\004\000\027\002\024\000\024\000\024\000\239\001\
\005\000\006\000\007\000\008\000\119\000\183\000\183\000\120\000\
\240\001\183\000\081\002\058\000\075\001\183\000\178\000\179\000\
\180\000\245\000\139\000\181\000\182\000\140\000\075\001\183\000\
\242\001\251\000\058\000\012\001\184\000\185\000\251\000\186\000\
\012\001\101\000\012\001\012\001\245\000\057\000\241\001\091\000\
\094\000\245\000\009\000\010\000\011\000\251\000\251\000\251\000\
\251\000\251\000\251\000\245\001\057\000\009\000\010\000\011\000\
\245\000\245\000\245\000\245\000\245\000\245\000\135\000\136\000\
\009\000\010\000\011\000\009\000\010\000\011\000\161\000\009\000\
\010\000\011\000\161\000\251\000\248\001\161\000\161\000\161\000\
\154\000\155\000\156\000\161\000\157\000\250\001\245\000\127\002\
\161\000\251\000\251\000\026\001\247\001\251\000\027\001\076\000\
\251\000\251\000\251\001\076\000\245\000\245\000\076\000\076\000\
\245\000\199\000\248\000\245\000\245\000\199\000\144\002\248\000\
\251\000\251\000\251\000\016\002\241\000\242\000\243\000\244\000\
\114\001\115\001\017\002\245\000\245\000\245\000\248\000\248\000\
\248\000\248\000\248\000\248\000\202\000\018\002\075\001\075\001\
\075\001\075\001\075\001\081\000\202\000\081\000\081\000\081\000\
\081\000\081\000\081\000\081\000\026\002\081\000\081\000\081\000\
\081\000\081\000\072\001\205\000\248\000\073\001\009\000\010\000\
\011\000\075\001\075\001\205\000\116\001\162\000\162\000\117\001\
\070\000\162\000\248\000\248\000\162\000\162\000\248\000\070\000\
\070\000\248\000\248\000\123\001\138\000\204\000\075\001\075\001\
\075\001\134\001\135\001\075\001\075\001\204\000\203\000\075\001\
\034\002\248\000\248\000\248\000\075\001\075\001\203\000\075\001\
\075\001\075\001\000\002\116\001\226\000\075\001\117\001\039\002\
\226\000\075\001\075\001\075\001\075\001\075\001\075\001\075\001\
\075\001\075\001\075\001\075\001\076\001\076\001\076\001\076\001\
\076\001\081\000\206\000\081\000\081\000\081\000\081\000\081\000\
\081\000\081\000\206\000\081\000\081\000\081\000\081\000\081\000\
\024\000\025\000\026\000\027\000\028\000\229\001\230\001\076\001\
\076\001\032\000\033\000\034\000\035\000\192\000\193\000\194\000\
\195\000\196\000\197\000\174\000\073\001\086\001\086\001\086\001\
\086\001\086\001\174\000\174\000\076\001\076\001\076\001\173\000\
\235\000\076\001\076\001\173\000\235\000\076\001\173\000\173\000\
\010\002\136\001\076\001\076\001\137\001\076\001\076\001\076\001\
\086\001\086\001\136\001\076\001\053\002\137\001\056\002\076\001\
\076\001\076\001\076\001\076\001\076\001\076\001\076\001\076\001\
\076\001\076\001\253\001\073\001\062\002\086\001\086\001\086\001\
\048\002\231\001\086\001\086\001\232\001\055\002\086\001\065\002\
\009\000\010\000\011\000\086\001\086\001\068\002\086\001\086\001\
\086\001\072\002\231\001\146\001\086\001\232\001\073\001\066\002\
\086\001\086\001\086\001\086\001\086\001\086\001\086\001\086\001\
\086\001\086\001\086\001\090\001\143\000\144\000\145\000\146\000\
\192\000\193\000\194\000\195\000\196\000\197\000\055\001\040\002\
\055\001\069\002\073\001\055\001\055\001\055\001\055\001\071\002\
\024\000\025\000\026\000\027\000\028\000\067\002\177\000\091\001\
\073\001\032\000\033\000\034\000\035\000\165\001\084\002\141\000\
\166\001\167\000\167\001\141\000\111\001\111\001\141\000\141\000\
\167\000\167\000\083\002\178\000\179\000\180\000\093\002\070\002\
\181\000\182\000\073\001\099\002\183\000\094\002\141\000\141\000\
\141\000\184\000\185\000\102\002\186\000\073\002\101\000\088\002\
\073\001\113\002\092\001\009\000\010\000\011\000\093\001\094\001\
\095\001\096\001\097\001\098\001\099\001\100\001\101\001\102\001\
\103\001\033\000\114\002\033\000\033\000\033\000\033\000\033\000\
\033\000\033\000\115\002\033\000\033\000\033\000\033\000\033\000\
\009\000\010\000\011\000\033\000\117\002\033\000\118\002\163\000\
\119\002\033\000\164\000\034\000\165\000\034\000\034\000\034\000\
\034\000\034\000\034\000\034\000\166\000\034\000\034\000\034\000\
\034\000\034\000\120\002\166\000\166\000\034\000\121\002\034\000\
\124\002\132\000\085\002\034\000\100\002\073\001\135\000\073\001\
\132\000\132\000\067\000\067\000\033\000\135\000\135\000\033\000\
\033\000\125\002\163\000\033\000\033\000\164\000\126\002\165\000\
\132\000\132\000\132\000\130\002\154\001\135\000\135\000\135\000\
\165\000\160\000\160\000\033\000\033\000\033\000\034\000\165\000\
\165\000\034\000\009\000\010\000\011\000\034\000\034\000\168\000\
\030\000\030\000\097\000\097\000\132\002\119\000\168\000\168\000\
\120\000\139\000\118\001\119\001\140\000\034\000\034\000\034\000\
\036\000\128\002\036\000\036\000\036\000\036\000\036\000\036\000\
\036\000\133\002\036\000\036\000\036\000\036\000\036\000\009\000\
\010\000\011\000\036\000\137\002\036\000\009\000\010\000\011\000\
\036\000\138\002\035\000\139\002\035\000\035\000\035\000\035\000\
\035\000\035\000\035\000\142\001\035\000\035\000\035\000\035\000\
\035\000\074\000\075\000\140\002\035\000\141\002\035\000\138\001\
\139\001\142\002\035\000\163\001\164\001\047\001\048\001\118\001\
\009\000\010\000\011\000\036\000\035\002\036\002\036\000\057\001\
\058\001\059\001\036\000\036\000\071\000\073\000\119\001\047\000\
\134\000\176\000\009\001\067\001\068\001\079\001\069\001\134\000\
\134\000\070\001\036\000\036\000\036\000\035\000\080\001\225\000\
\035\000\009\001\227\000\230\000\035\000\035\000\229\000\134\000\
\134\000\134\000\228\000\231\000\119\000\107\001\108\001\120\000\
\231\001\021\000\045\000\232\001\035\000\035\000\035\000\037\000\
\160\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
\109\001\037\000\037\000\037\000\037\000\037\000\009\000\010\000\
\011\000\037\000\049\002\037\000\114\000\219\000\151\001\037\000\
\208\000\038\000\001\002\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\143\001\038\000\038\000\038\000\038\000\038\000\
\246\000\011\002\155\001\038\000\133\000\038\000\015\001\170\001\
\223\000\038\000\125\001\133\000\133\000\107\002\129\002\009\000\
\010\000\011\000\037\000\149\001\148\001\037\000\000\000\000\000\
\000\000\037\000\037\000\133\000\133\000\133\000\136\000\000\000\
\000\000\000\000\000\000\000\000\000\000\136\000\136\000\000\000\
\000\000\037\000\037\000\037\000\038\000\000\000\000\000\038\000\
\000\000\000\000\000\000\038\000\038\000\136\000\136\000\136\000\
\000\000\000\000\000\000\000\000\000\000\024\000\025\000\026\000\
\027\000\028\000\000\000\038\000\038\000\038\000\032\000\033\000\
\034\000\035\000\119\000\000\000\000\000\120\000\024\000\025\000\
\026\000\027\000\028\000\000\000\000\000\000\000\000\000\032\000\
\033\000\034\000\035\000\026\001\000\000\000\000\027\001\101\000\
\149\000\000\000\000\000\000\000\000\000\149\000\000\000\149\000\
\149\000\149\000\149\000\149\000\149\000\149\000\000\000\149\000\
\149\000\149\000\149\000\149\000\185\000\000\000\000\000\000\000\
\000\000\185\000\000\000\185\000\185\000\185\000\185\000\185\000\
\185\000\185\000\101\000\185\000\185\000\185\000\185\000\185\000\
\000\000\101\000\101\000\000\000\000\000\009\000\010\000\011\000\
\000\000\000\000\149\000\000\000\000\000\000\000\000\000\000\000\
\000\000\101\000\101\000\101\000\000\000\000\000\009\000\010\000\
\011\000\149\000\000\000\000\000\149\000\000\000\185\000\149\000\
\149\000\000\000\000\000\056\001\000\000\056\001\000\000\110\000\
\056\001\056\001\056\001\056\001\185\000\185\000\017\000\000\000\
\185\000\000\000\000\000\017\000\185\000\017\000\017\000\017\000\
\017\000\017\000\017\000\017\000\000\000\017\000\017\000\017\000\
\017\000\017\000\176\000\143\000\144\000\145\000\146\000\000\000\
\000\000\000\000\110\000\000\000\000\000\000\000\110\000\000\000\
\000\000\110\000\110\000\000\000\000\000\176\000\143\000\144\000\
\145\000\146\000\000\000\000\000\000\000\177\000\000\000\000\000\
\017\000\110\000\110\000\110\000\000\000\000\000\000\000\176\000\
\143\000\144\000\145\000\146\000\000\000\000\000\000\000\017\000\
\177\000\000\000\178\000\179\000\180\000\017\000\000\000\181\000\
\182\000\000\000\000\000\183\000\000\000\000\000\000\000\104\000\
\184\000\185\000\177\000\186\000\000\000\178\000\179\000\180\000\
\000\000\243\001\181\000\182\000\000\000\000\000\183\000\000\000\
\000\000\000\000\103\000\184\000\185\000\000\000\186\000\178\000\
\179\000\180\000\187\000\102\000\181\000\182\000\000\000\000\000\
\183\000\000\000\104\000\000\000\000\000\184\000\185\000\000\000\
\186\000\104\000\104\000\000\000\248\000\176\000\143\000\144\000\
\145\000\146\000\000\000\000\000\000\000\103\000\000\000\000\000\
\000\000\104\000\104\000\104\000\103\000\103\000\102\000\176\000\
\143\000\144\000\145\000\146\000\000\000\102\000\102\000\000\000\
\177\000\000\000\000\000\000\000\103\000\103\000\103\000\000\000\
\105\000\000\000\000\000\000\000\000\000\102\000\102\000\102\000\
\000\000\000\000\177\000\000\000\000\000\178\000\179\000\180\000\
\000\000\000\000\181\000\182\000\000\000\000\000\183\000\000\000\
\000\000\000\000\000\000\184\000\185\000\000\000\186\000\178\000\
\179\000\180\000\003\002\105\000\181\000\182\000\000\000\000\000\
\183\000\000\000\105\000\105\000\000\000\184\000\185\000\000\000\
\186\000\000\000\000\000\000\000\013\002\176\000\143\000\144\000\
\145\000\146\000\105\000\105\000\105\000\057\001\000\000\057\001\
\000\000\000\000\057\001\057\001\057\001\057\001\000\000\176\000\
\143\000\144\000\145\000\146\000\000\000\000\000\000\000\184\000\
\177\000\184\000\184\000\184\000\184\000\184\000\184\000\184\000\
\000\000\184\000\184\000\184\000\184\000\184\000\000\000\000\000\
\000\000\000\000\177\000\000\000\000\000\178\000\179\000\180\000\
\000\000\000\000\181\000\182\000\000\000\000\000\183\000\000\000\
\000\000\000\000\000\000\184\000\185\000\000\000\186\000\178\000\
\179\000\180\000\024\002\000\000\181\000\182\000\000\000\000\000\
\183\000\000\000\000\000\000\000\000\000\184\000\185\000\000\000\
\186\000\000\000\175\000\000\000\051\002\176\000\143\000\144\000\
\145\000\146\000\000\000\111\001\000\000\111\001\111\001\111\001\
\111\001\111\001\111\001\111\001\000\000\111\001\111\001\111\001\
\111\001\111\001\000\000\000\000\000\000\111\001\000\000\111\001\
\177\000\000\000\000\000\111\001\000\000\000\000\047\001\048\001\
\000\000\000\000\000\000\000\000\000\000\000\000\055\001\056\001\
\057\001\058\001\059\001\000\000\000\000\178\000\179\000\180\000\
\000\000\000\000\181\000\182\000\067\001\068\001\183\000\069\001\
\000\000\000\000\070\001\184\000\185\000\000\000\186\000\000\000\
\000\000\111\001\079\002\000\000\000\000\111\001\111\001\112\001\
\000\000\112\001\112\001\112\001\112\001\112\001\112\001\112\001\
\000\000\112\001\112\001\112\001\112\001\112\001\000\000\000\000\
\000\000\112\001\000\000\112\001\000\000\000\000\046\000\112\001\
\046\000\046\000\046\000\046\000\046\000\046\000\046\000\000\000\
\046\000\046\000\046\000\046\000\046\000\000\000\000\000\000\000\
\046\000\000\000\046\000\176\000\143\000\144\000\145\000\146\000\
\058\001\000\000\058\001\000\000\000\000\058\001\058\001\058\001\
\058\001\000\000\000\000\000\000\000\000\112\001\000\000\000\000\
\082\000\112\001\112\001\000\000\000\000\082\000\177\000\082\000\
\082\000\082\000\082\000\082\000\082\000\082\000\000\000\082\000\
\082\000\082\000\082\000\082\000\045\000\000\000\000\000\000\000\
\030\000\030\000\000\000\178\000\179\000\180\000\000\000\000\000\
\181\000\182\000\000\000\000\000\183\000\000\000\000\000\000\000\
\000\000\184\000\185\000\000\000\186\000\000\000\074\001\000\000\
\000\000\000\000\082\000\176\000\143\000\144\000\145\000\146\000\
\059\001\000\000\059\001\000\000\000\000\059\001\059\001\059\001\
\059\001\082\000\000\000\000\000\000\000\176\000\143\000\144\000\
\145\000\146\000\000\000\000\000\000\000\000\000\177\000\000\000\
\176\000\143\000\144\000\145\000\146\000\060\001\000\000\060\001\
\000\000\000\000\060\001\060\001\060\001\060\001\000\000\000\000\
\177\000\000\000\000\000\178\000\179\000\180\000\000\000\000\000\
\181\000\182\000\000\000\177\000\183\000\000\000\000\000\000\000\
\000\000\184\000\185\000\000\000\016\001\178\000\179\000\180\000\
\000\000\000\000\181\000\182\000\000\000\000\000\183\000\000\000\
\000\000\000\000\000\000\184\000\185\000\181\000\186\000\000\000\
\000\000\183\000\000\000\000\000\000\000\000\000\184\000\185\000\
\216\000\186\000\216\000\216\000\216\000\216\000\216\000\216\000\
\216\000\000\000\216\000\216\000\216\000\216\000\216\000\000\000\
\000\000\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\054\001\055\001\056\001\057\001\058\001\
\059\001\000\000\060\001\061\001\062\001\216\000\063\001\064\001\
\065\001\066\001\067\001\068\001\000\000\069\001\000\000\000\000\
\070\001\000\000\041\002\216\000\216\000\000\000\071\001\216\000\
\069\001\069\001\069\001\069\001\069\001\069\001\069\001\069\001\
\069\001\069\001\069\001\069\001\069\001\069\001\069\001\069\001\
\069\001\069\001\069\001\069\001\069\001\069\001\069\001\069\001\
\000\000\069\001\069\001\069\001\000\000\069\001\069\001\069\001\
\069\001\069\001\069\001\069\001\069\001\069\001\000\000\069\001\
\069\001\069\001\069\001\069\001\000\000\069\001\016\001\016\001\
\016\001\016\001\016\001\016\001\016\001\016\001\016\001\016\001\
\016\001\016\001\016\001\016\001\016\001\016\001\016\001\016\001\
\016\001\016\001\016\001\016\001\016\001\016\001\000\000\016\001\
\016\001\016\001\000\000\016\001\016\001\016\001\016\001\000\000\
\000\000\016\001\000\000\016\001\000\000\016\001\016\001\016\001\
\016\001\016\001\000\000\016\001\014\001\014\001\014\001\014\001\
\014\001\014\001\014\001\014\001\014\001\014\001\014\001\014\001\
\014\001\014\001\014\001\014\001\014\001\014\001\014\001\014\001\
\014\001\014\001\014\001\014\001\000\000\014\001\014\001\014\001\
\000\000\014\001\014\001\014\001\014\001\014\001\014\001\000\000\
\014\001\000\000\000\000\014\001\000\000\000\000\014\001\014\001\
\000\000\014\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\054\001\055\001\056\001\057\001\
\058\001\059\001\000\000\060\001\061\001\062\001\000\000\063\001\
\064\001\065\001\066\001\067\001\068\001\000\000\069\001\000\000\
\000\000\070\001\000\000\000\000\057\002\000\000\000\000\071\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\054\001\055\001\056\001\057\001\058\001\059\001\
\000\000\060\001\061\001\062\001\000\000\063\001\064\001\065\001\
\066\001\067\001\068\001\000\000\069\001\000\000\000\000\070\001\
\000\000\059\002\000\000\000\000\000\000\071\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\051\001\052\001\053\001\
\054\001\055\001\056\001\057\001\058\001\059\001\000\000\060\001\
\061\001\062\001\000\000\063\001\064\001\065\001\066\001\067\001\
\068\001\136\002\069\001\000\000\000\000\070\001\000\000\000\000\
\000\000\000\000\000\000\071\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\054\001\055\001\
\056\001\057\001\058\001\059\001\000\000\060\001\061\001\062\001\
\000\000\063\001\064\001\065\001\066\001\067\001\068\001\145\002\
\069\001\000\000\000\000\070\001\000\000\000\000\000\000\000\000\
\000\000\071\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\054\001\055\001\056\001\057\001\
\058\001\059\001\000\000\060\001\061\001\062\001\000\000\063\001\
\064\001\065\001\066\001\067\001\068\001\000\000\069\001\000\000\
\000\000\070\001\000\000\000\000\000\000\000\000\000\000\071\001\
\019\001\019\001\019\001\019\001\019\001\019\001\019\001\019\001\
\019\001\019\001\019\001\000\000\000\000\019\001\019\001\019\001\
\019\001\019\001\019\001\019\001\019\001\019\001\019\001\019\001\
\000\000\019\001\019\001\019\001\000\000\019\001\019\001\019\001\
\019\001\000\000\000\000\019\001\000\000\019\001\000\000\000\000\
\019\001\019\001\019\001\019\001\000\000\019\001\022\001\022\001\
\022\001\022\001\022\001\022\001\022\001\022\001\022\001\022\001\
\022\001\000\000\000\000\022\001\022\001\022\001\022\001\022\001\
\022\001\022\001\022\001\022\001\022\001\022\001\000\000\022\001\
\022\001\022\001\000\000\022\001\022\001\022\001\022\001\000\000\
\000\000\022\001\000\000\022\001\000\000\000\000\022\001\022\001\
\022\001\022\001\000\000\022\001\020\001\020\001\020\001\020\001\
\020\001\020\001\020\001\020\001\020\001\020\001\020\001\000\000\
\000\000\020\001\020\001\020\001\020\001\020\001\020\001\020\001\
\020\001\020\001\020\001\020\001\000\000\020\001\020\001\020\001\
\000\000\020\001\020\001\020\001\020\001\000\000\000\000\020\001\
\000\000\020\001\000\000\000\000\020\001\020\001\020\001\020\001\
\000\000\020\001\021\001\021\001\021\001\021\001\021\001\021\001\
\021\001\021\001\021\001\021\001\021\001\000\000\000\000\021\001\
\021\001\021\001\021\001\021\001\021\001\021\001\021\001\021\001\
\021\001\021\001\000\000\021\001\021\001\021\001\000\000\021\001\
\021\001\021\001\021\001\000\000\000\000\021\001\000\000\021\001\
\000\000\000\000\021\001\021\001\021\001\021\001\000\000\021\001\
\023\001\023\001\023\001\023\001\023\001\023\001\023\001\023\001\
\023\001\023\001\023\001\000\000\000\000\023\001\023\001\023\001\
\023\001\023\001\023\001\023\001\023\001\023\001\023\001\023\001\
\000\000\023\001\023\001\023\001\000\000\023\001\023\001\023\001\
\023\001\000\000\000\000\023\001\000\000\023\001\000\000\000\000\
\023\001\023\001\023\001\023\001\000\000\023\001\025\001\025\001\
\025\001\025\001\025\001\025\001\025\001\025\001\025\001\025\001\
\025\001\000\000\000\000\025\001\025\001\025\001\025\001\025\001\
\025\001\025\001\025\001\025\001\025\001\025\001\000\000\025\001\
\025\001\025\001\000\000\025\001\025\001\025\001\025\001\000\000\
\000\000\025\001\000\000\025\001\000\000\000\000\025\001\025\001\
\025\001\025\001\000\000\025\001\039\001\039\001\039\001\039\001\
\039\001\039\001\039\001\039\001\039\001\039\001\039\001\000\000\
\000\000\039\001\039\001\039\001\039\001\039\001\039\001\039\001\
\039\001\039\001\039\001\039\001\000\000\039\001\039\001\039\001\
\000\000\039\001\039\001\039\001\039\001\000\000\000\000\039\001\
\000\000\039\001\000\000\000\000\039\001\039\001\039\001\039\001\
\000\000\039\001\040\001\040\001\040\001\040\001\040\001\040\001\
\040\001\040\001\040\001\040\001\040\001\000\000\000\000\040\001\
\040\001\040\001\040\001\040\001\040\001\040\001\040\001\040\001\
\040\001\040\001\000\000\040\001\040\001\040\001\000\000\040\001\
\040\001\040\001\040\001\000\000\000\000\040\001\000\000\040\001\
\000\000\000\000\040\001\040\001\040\001\040\001\000\000\040\001\
\041\001\041\001\041\001\041\001\041\001\041\001\041\001\041\001\
\041\001\041\001\041\001\000\000\000\000\041\001\041\001\041\001\
\041\001\041\001\041\001\041\001\041\001\041\001\041\001\041\001\
\000\000\041\001\041\001\041\001\000\000\041\001\041\001\041\001\
\041\001\000\000\000\000\041\001\000\000\041\001\000\000\000\000\
\041\001\041\001\041\001\041\001\000\000\041\001\033\001\033\001\
\033\001\033\001\033\001\033\001\033\001\033\001\033\001\033\001\
\033\001\000\000\000\000\033\001\033\001\033\001\033\001\033\001\
\033\001\033\001\033\001\033\001\033\001\033\001\000\000\033\001\
\033\001\033\001\000\000\033\001\033\001\033\001\033\001\000\000\
\000\000\033\001\000\000\033\001\000\000\000\000\033\001\033\001\
\033\001\033\001\000\000\033\001\017\001\017\001\017\001\017\001\
\017\001\017\001\017\001\017\001\017\001\017\001\017\001\000\000\
\000\000\017\001\017\001\017\001\017\001\017\001\017\001\017\001\
\017\001\000\000\000\000\000\000\000\000\017\001\017\001\017\001\
\000\000\017\001\017\001\017\001\017\001\000\000\000\000\017\001\
\000\000\017\001\000\000\000\000\017\001\017\001\017\001\017\001\
\000\000\017\001\018\001\018\001\018\001\018\001\018\001\018\001\
\018\001\018\001\018\001\018\001\018\001\000\000\000\000\018\001\
\018\001\018\001\018\001\018\001\018\001\018\001\018\001\000\000\
\000\000\000\000\000\000\018\001\018\001\018\001\000\000\018\001\
\018\001\018\001\018\001\000\000\000\000\018\001\000\000\018\001\
\000\000\000\000\018\001\018\001\018\001\018\001\000\000\018\001\
\037\001\037\001\037\001\037\001\037\001\037\001\037\001\037\001\
\037\001\037\001\037\001\000\000\000\000\037\001\037\001\037\001\
\037\001\037\001\037\001\037\001\037\001\000\000\000\000\000\000\
\000\000\037\001\037\001\037\001\000\000\037\001\037\001\037\001\
\037\001\000\000\000\000\037\001\000\000\037\001\000\000\000\000\
\037\001\037\001\037\001\037\001\000\000\037\001\038\001\038\001\
\038\001\038\001\038\001\038\001\038\001\038\001\038\001\038\001\
\038\001\000\000\000\000\038\001\038\001\038\001\038\001\038\001\
\038\001\038\001\038\001\000\000\000\000\000\000\000\000\038\001\
\038\001\038\001\000\000\038\001\038\001\038\001\038\001\000\000\
\000\000\038\001\000\000\038\001\000\000\000\000\038\001\038\001\
\038\001\038\001\000\000\038\001\053\001\053\001\053\001\053\001\
\053\001\053\001\053\001\053\001\053\001\053\001\053\001\000\000\
\000\000\053\001\053\001\053\001\053\001\053\001\053\001\000\000\
\000\000\000\000\000\000\000\000\000\000\053\001\053\001\053\001\
\000\000\053\001\053\001\053\001\053\001\000\000\000\000\053\001\
\000\000\053\001\000\000\000\000\053\001\053\001\053\001\053\001\
\000\000\053\001\054\001\054\001\054\001\054\001\054\001\054\001\
\054\001\054\001\054\001\054\001\054\001\000\000\000\000\054\001\
\054\001\054\001\054\001\054\001\054\001\000\000\000\000\000\000\
\000\000\000\000\000\000\054\001\054\001\054\001\000\000\054\001\
\054\001\054\001\054\001\000\000\000\000\054\001\000\000\054\001\
\000\000\000\000\054\001\054\001\054\001\054\001\000\000\054\001\
\049\001\049\001\049\001\049\001\049\001\049\001\049\001\049\001\
\049\001\049\001\049\001\000\000\000\000\049\001\049\001\049\001\
\049\001\049\001\049\001\000\000\000\000\000\000\000\000\000\000\
\000\000\049\001\049\001\049\001\000\000\049\001\049\001\000\000\
\000\000\000\000\000\000\049\001\000\000\049\001\000\000\000\000\
\049\001\049\001\049\001\049\001\000\000\049\001\050\001\050\001\
\050\001\050\001\050\001\050\001\050\001\050\001\050\001\050\001\
\050\001\000\000\000\000\050\001\050\001\050\001\050\001\050\001\
\050\001\000\000\000\000\000\000\000\000\000\000\000\000\050\001\
\050\001\050\001\000\000\050\001\050\001\000\000\000\000\000\000\
\000\000\050\001\000\000\050\001\000\000\000\000\050\001\050\001\
\050\001\050\001\000\000\050\001\051\001\051\001\051\001\051\001\
\051\001\051\001\051\001\051\001\051\001\051\001\051\001\000\000\
\000\000\051\001\051\001\051\001\051\001\051\001\051\001\000\000\
\000\000\000\000\000\000\000\000\000\000\051\001\051\001\051\001\
\000\000\051\001\051\001\000\000\000\000\000\000\000\000\051\001\
\000\000\051\001\000\000\000\000\051\001\051\001\051\001\051\001\
\000\000\051\001\052\001\052\001\052\001\052\001\052\001\052\001\
\052\001\052\001\052\001\052\001\052\001\000\000\000\000\052\001\
\052\001\052\001\052\001\052\001\052\001\000\000\000\000\000\000\
\000\000\000\000\000\000\052\001\052\001\052\001\000\000\052\001\
\052\001\000\000\000\000\000\000\000\000\052\001\000\000\052\001\
\000\000\000\000\052\001\052\001\052\001\052\001\000\000\052\001\
\047\001\047\001\047\001\047\001\047\001\047\001\047\001\047\001\
\047\001\047\001\047\001\000\000\000\000\047\001\047\001\061\001\
\000\000\061\001\000\000\000\000\061\001\061\001\061\001\061\001\
\000\000\047\001\047\001\047\001\000\000\047\001\047\001\000\000\
\000\000\000\000\000\000\047\001\000\000\047\001\000\000\000\000\
\047\001\047\001\047\001\047\001\000\000\047\001\048\001\048\001\
\048\001\048\001\048\001\048\001\048\001\048\001\048\001\048\001\
\048\001\000\000\000\000\048\001\048\001\062\001\000\000\062\001\
\000\000\000\000\062\001\062\001\062\001\062\001\000\000\048\001\
\048\001\048\001\000\000\048\001\048\001\000\000\000\000\000\000\
\000\000\048\001\000\000\048\001\000\000\000\000\048\001\048\001\
\048\001\048\001\000\000\048\001\044\001\044\001\044\001\044\001\
\044\001\044\001\044\001\044\001\044\001\044\001\044\001\063\001\
\000\000\063\001\000\000\000\000\063\001\063\001\063\001\063\001\
\000\000\000\000\000\000\000\000\000\000\044\001\044\001\044\001\
\000\000\044\001\044\001\000\000\000\000\000\000\000\000\044\001\
\000\000\044\001\000\000\000\000\044\001\044\001\044\001\044\001\
\000\000\044\001\046\001\046\001\046\001\046\001\046\001\046\001\
\046\001\046\001\046\001\046\001\046\001\000\000\024\000\025\000\
\026\000\027\000\028\000\000\000\000\000\000\000\000\000\032\000\
\033\000\034\000\035\000\084\000\046\001\046\001\085\000\046\001\
\046\001\000\000\000\000\000\000\000\000\046\001\000\000\046\001\
\000\000\000\000\046\001\046\001\046\001\046\001\000\000\046\001\
\045\001\045\001\045\001\045\001\045\001\045\001\045\001\045\001\
\045\001\045\001\045\001\055\000\000\000\024\000\025\000\026\000\
\027\000\028\000\029\000\030\000\000\000\031\000\032\000\033\000\
\034\000\035\000\045\001\000\000\000\000\045\001\045\001\000\000\
\000\000\000\000\000\000\045\001\000\000\045\001\000\000\000\000\
\045\001\045\001\045\001\045\001\000\000\045\001\042\001\042\001\
\042\001\042\001\042\001\042\001\042\001\042\001\042\001\042\001\
\042\001\000\000\000\000\000\000\043\001\043\001\043\001\043\001\
\043\001\043\001\043\001\043\001\043\001\043\001\043\001\000\000\
\064\001\000\000\064\001\042\001\042\001\064\001\064\001\064\001\
\064\001\042\001\000\000\042\001\000\000\000\000\042\001\042\001\
\042\001\042\001\043\001\042\001\000\000\000\000\000\000\043\001\
\000\000\043\001\000\000\000\000\043\001\043\001\043\001\043\001\
\000\000\043\001\036\001\036\001\036\001\036\001\036\001\036\001\
\036\001\036\001\036\001\036\001\036\001\022\000\000\000\000\000\
\000\000\000\000\023\000\000\000\024\000\025\000\026\000\027\000\
\028\000\029\000\030\000\000\000\031\000\032\000\033\000\034\000\
\035\000\036\000\000\000\000\000\037\000\036\001\000\000\036\001\
\000\000\000\000\036\001\036\001\036\001\036\001\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\054\001\055\001\056\001\
\057\001\058\001\059\001\000\000\060\001\061\001\062\001\000\000\
\063\001\064\001\065\001\066\001\067\001\068\001\000\000\069\001\
\000\000\000\000\070\001\000\000\000\000\000\000\000\000\000\000\
\071\001\047\001\048\001\049\001\050\001\051\001\052\001\053\001\
\054\001\055\001\056\001\057\001\058\001\059\001\000\000\060\001\
\061\001\062\001\000\000\063\001\000\000\065\001\066\001\067\001\
\068\001\000\000\069\001\000\000\000\000\070\001\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\054\001\055\001\056\001\
\057\001\058\001\059\001\000\000\060\001\061\001\062\001\000\000\
\000\000\000\000\065\001\066\001\067\001\068\001\000\000\069\001\
\000\000\000\000\070\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\054\001\055\001\056\001\057\001\058\001\059\001\
\000\000\060\001\000\000\062\001\000\000\000\000\000\000\065\001\
\066\001\067\001\068\001\000\000\069\001\000\000\000\000\070\001\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\054\001\
\055\001\056\001\057\001\058\001\059\001\000\000\060\001\000\000\
\000\000\000\000\000\000\000\000\065\001\066\001\067\001\068\001\
\000\000\069\001\000\000\000\000\070\001\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\054\001\055\001\056\001\057\001\
\058\001\059\001\142\000\143\000\144\000\145\000\146\000\000\000\
\147\000\065\001\066\001\067\001\068\001\000\000\069\001\047\001\
\048\001\070\001\000\000\051\001\052\001\053\001\054\001\055\001\
\056\001\057\001\058\001\059\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\065\001\066\001\067\001\068\001\000\000\
\069\001\047\001\048\001\070\001\000\000\000\000\000\000\000\000\
\000\000\055\001\056\001\057\001\058\001\059\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\065\001\066\001\067\001\
\068\001\022\000\069\001\000\000\000\000\070\001\023\000\000\000\
\024\000\025\000\026\000\027\000\028\000\029\000\030\000\000\000\
\031\000\032\000\033\000\034\000\035\000\024\000\025\000\026\000\
\027\000\028\000\000\000\000\000\000\000\000\000\032\000\033\000\
\034\000\035\000\000\000\000\000\000\000\120\001\215\000\121\001\
\024\000\025\000\026\000\027\000\028\000\029\000\030\000\000\000\
\031\000\032\000\033\000\034\000\035\000\233\000\000\000\024\000\
\025\000\026\000\027\000\028\000\029\000\030\000\000\000\031\000\
\032\000\033\000\034\000\035\000\011\001\000\000\024\000\025\000\
\026\000\027\000\028\000\029\000\030\000\000\000\031\000\032\000\
\033\000\034\000\035\000\084\001\000\000\024\000\025\000\026\000\
\027\000\028\000\029\000\030\000\000\000\031\000\032\000\033\000\
\034\000\035\000\178\001\000\000\024\000\025\000\026\000\027\000\
\028\000\029\000\030\000\000\000\031\000\032\000\033\000\034\000\
\035\000\058\000\000\000\058\000\058\000\058\000\058\000\058\000\
\058\000\058\000\000\000\058\000\058\000\058\000\058\000\058\000\
\148\000\000\000\148\000\148\000\148\000\148\000\148\000\148\000\
\148\000\000\000\148\000\148\000\148\000\148\000\148\000\215\000\
\000\000\215\000\215\000\215\000\215\000\215\000\215\000\215\000\
\000\000\215\000\215\000\215\000\215\000\215\000\184\000\000\000\
\184\000\184\000\184\000\184\000\184\000\184\000\184\000\000\000\
\184\000\184\000\184\000\184\000\184\000\065\001\000\000\065\001\
\000\000\000\000\065\001\065\001\065\001\065\001"

let yycheck = "\001\000\
\002\000\098\000\101\001\053\000\047\000\081\000\087\000\017\000\
\107\001\034\001\074\001\250\001\014\000\210\000\211\000\201\000\
\018\000\122\000\030\001\021\001\228\000\229\000\024\001\065\001\
\129\000\027\001\001\001\126\000\018\000\065\001\072\001\006\001\
\139\000\069\001\077\000\001\001\021\001\007\001\008\001\024\001\
\006\001\000\000\005\001\140\000\001\001\047\000\067\001\079\001\
\080\001\051\001\052\000\072\001\073\001\055\000\056\000\057\000\
\106\000\001\001\001\001\017\000\072\001\073\001\006\001\006\001\
\066\001\065\001\056\000\001\001\070\000\001\001\072\000\071\001\
\006\001\001\001\006\001\077\000\051\001\021\001\006\001\081\000\
\024\001\000\000\067\001\027\001\042\000\161\000\088\001\089\001\
\090\001\186\000\092\000\066\001\001\001\001\001\051\001\174\001\
\175\001\099\000\056\000\109\000\001\001\103\000\068\001\088\001\
\089\001\090\001\069\001\051\001\072\000\066\001\024\001\094\002\
\026\001\021\001\051\001\125\000\024\001\065\001\066\001\027\001\
\122\000\069\001\066\001\051\001\126\000\068\001\128\000\129\000\
\130\000\066\001\001\000\002\000\134\000\238\000\068\001\240\000\
\186\000\236\000\066\001\238\001\066\001\124\002\051\001\051\001\
\088\001\089\001\090\001\254\000\247\001\069\001\051\001\109\000\
\072\001\073\001\068\001\085\001\181\001\066\001\066\001\161\000\
\088\001\089\001\090\001\173\000\128\000\066\001\130\000\125\000\
\001\001\110\001\111\001\252\000\253\000\006\001\001\001\016\001\
\128\001\129\001\130\001\131\001\088\001\089\001\090\001\015\001\
\186\000\228\000\156\001\157\001\158\001\159\001\200\000\223\001\
\224\001\225\001\021\001\227\001\051\001\024\001\001\001\201\000\
\024\001\001\001\026\001\006\001\206\000\028\002\029\002\030\002\
\031\002\065\001\065\001\066\001\066\001\069\001\069\001\173\000\
\059\002\073\001\051\001\065\001\007\001\001\001\016\001\069\001\
\051\001\001\001\228\000\073\001\069\001\070\001\006\001\233\000\
\234\000\066\001\236\000\043\002\238\000\001\001\240\000\066\001\
\021\001\001\001\200\000\024\001\030\001\053\002\006\001\090\002\
\000\000\092\002\065\001\051\001\095\002\001\001\001\001\088\001\
\089\001\090\001\073\001\006\001\218\000\007\001\068\001\083\001\
\021\001\116\001\066\001\024\001\014\001\068\001\016\001\051\001\
\072\001\065\001\021\001\051\001\117\001\024\001\236\000\033\001\
\027\001\073\001\125\002\065\001\001\001\136\001\066\001\051\001\
\034\001\006\001\066\001\073\001\079\001\144\001\001\001\001\001\
\137\001\140\002\001\001\006\001\006\001\001\001\066\001\006\001\
\051\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\014\001\016\001\017\001\018\001\019\001\020\001\000\000\066\001\
\030\001\162\001\177\000\178\000\179\000\180\000\181\000\182\000\
\183\000\184\000\185\000\033\001\001\001\079\001\051\001\068\001\
\191\000\083\001\084\001\085\001\086\001\088\001\089\001\090\001\
\051\001\051\001\001\001\021\001\051\001\066\001\024\001\051\001\
\021\001\072\001\073\001\024\001\041\001\042\001\027\001\066\001\
\066\001\051\001\001\001\066\001\065\001\220\000\066\001\006\001\
\067\001\072\001\071\001\088\001\089\001\090\001\073\001\055\000\
\066\001\057\000\063\001\064\001\231\001\066\001\051\001\085\001\
\069\001\131\001\067\001\174\001\088\001\089\001\090\001\232\001\
\073\001\067\001\065\001\065\001\051\001\066\001\088\001\089\001\
\090\001\072\001\073\001\073\001\245\001\021\001\001\001\248\001\
\024\001\250\001\251\001\066\001\051\001\159\001\088\001\089\001\
\090\001\072\001\001\001\088\001\089\001\090\001\065\001\006\001\
\072\001\073\001\021\001\066\001\174\001\024\001\073\001\026\001\
\178\001\179\001\084\001\181\001\086\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\068\001\034\002\049\001\050\001\051\001\052\001\053\001\054\001\
\055\001\056\001\057\001\058\001\059\001\060\001\061\001\062\001\
\063\001\064\001\065\001\066\001\051\001\001\001\065\002\005\001\
\071\001\068\002\073\001\074\001\065\001\072\002\066\001\181\001\
\001\001\227\001\001\001\066\001\065\001\006\001\069\001\073\001\
\083\002\072\001\073\001\072\001\073\001\088\001\089\001\090\001\
\067\001\096\001\066\001\098\001\021\001\067\001\073\001\024\001\
\099\002\001\001\027\001\073\001\093\002\094\002\006\001\051\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\051\001\
\016\001\017\001\018\001\019\001\020\001\065\001\066\001\065\001\
\127\001\069\001\051\001\001\001\051\001\066\001\066\001\065\001\
\006\001\065\001\065\001\124\002\070\001\031\002\072\001\073\001\
\073\001\066\001\073\001\066\001\073\001\074\001\008\001\009\001\
\010\001\011\001\012\001\051\001\088\001\089\001\090\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\088\001\
\089\001\090\001\066\001\001\001\001\001\001\001\173\001\001\001\
\072\001\067\001\006\001\071\001\006\001\051\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\065\001\016\001\017\001\
\018\001\019\001\020\001\065\001\066\001\001\001\066\001\069\001\
\065\001\069\001\006\001\073\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\001\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\051\001\051\001\051\001\
\065\001\051\001\069\001\065\001\069\001\001\001\088\001\089\001\
\090\001\067\001\006\001\073\001\066\001\066\001\066\001\073\001\
\066\001\069\001\072\001\072\001\072\001\073\001\072\001\051\001\
\066\001\001\001\066\001\069\001\065\001\069\001\001\001\002\001\
\003\001\004\001\005\001\072\001\073\001\051\001\066\001\021\001\
\022\001\023\001\024\001\067\001\072\001\065\001\088\001\089\001\
\090\001\073\001\021\001\001\001\066\001\024\001\065\001\051\001\
\071\001\028\001\015\001\026\002\088\001\089\001\090\001\066\001\
\021\001\022\001\023\001\024\001\021\001\065\001\066\001\024\001\
\072\001\069\001\041\002\051\001\043\002\073\001\049\001\050\001\
\051\001\065\001\066\001\054\001\055\001\069\001\053\002\058\001\
\001\001\001\001\066\001\065\001\063\001\064\001\006\001\066\001\
\070\001\068\001\072\001\073\001\001\001\051\001\072\001\047\000\
\048\000\006\001\088\001\089\001\090\001\021\001\022\001\023\001\
\024\001\025\001\026\001\066\001\066\001\088\001\089\001\090\001\
\021\001\022\001\023\001\024\001\025\001\026\001\077\000\078\000\
\088\001\089\001\090\001\088\001\089\001\090\001\065\001\088\001\
\089\001\090\001\069\001\051\001\066\001\072\001\073\001\065\001\
\088\000\089\000\090\000\069\001\092\000\066\001\051\001\118\002\
\096\000\065\001\066\001\021\001\071\001\069\001\024\001\065\001\
\072\001\073\001\066\001\069\001\065\001\066\001\072\001\073\001\
\069\001\065\001\001\001\072\001\073\001\069\001\141\002\006\001\
\088\001\089\001\090\001\065\001\131\000\132\000\133\000\134\000\
\072\001\073\001\065\001\088\001\089\001\090\001\021\001\022\001\
\023\001\024\001\025\001\026\001\065\001\065\001\001\001\002\001\
\003\001\004\001\005\001\006\001\073\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\065\001\016\001\017\001\018\001\
\019\001\020\001\070\001\065\001\051\001\073\001\088\001\089\001\
\090\001\028\001\029\001\073\001\066\001\065\001\066\001\069\001\
\065\001\069\001\065\001\066\001\072\001\073\001\069\001\072\001\
\073\001\072\001\073\001\072\001\073\001\065\001\049\001\050\001\
\051\001\072\001\073\001\054\001\055\001\073\001\065\001\058\001\
\069\001\088\001\089\001\090\001\063\001\064\001\073\001\066\001\
\067\001\068\001\065\001\066\001\065\001\072\001\069\001\065\001\
\069\001\076\001\077\001\078\001\079\001\080\001\081\001\082\001\
\083\001\084\001\085\001\086\001\001\001\002\001\003\001\004\001\
\005\001\006\001\065\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\073\001\016\001\017\001\018\001\019\001\020\001\
\008\001\009\001\010\001\011\001\012\001\072\001\073\001\028\001\
\029\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\065\001\073\001\001\001\002\001\003\001\
\004\001\005\001\072\001\073\001\049\001\050\001\051\001\065\001\
\065\001\054\001\055\001\069\001\069\001\058\001\072\001\073\001\
\065\001\066\001\063\001\064\001\069\001\066\001\067\001\068\001\
\028\001\029\001\066\001\072\001\030\001\069\001\072\001\076\001\
\077\001\078\001\079\001\080\001\081\001\082\001\083\001\084\001\
\085\001\086\001\072\001\073\001\083\001\049\001\050\001\051\001\
\065\001\066\001\054\001\055\001\069\001\005\001\058\001\066\001\
\088\001\089\001\090\001\063\001\064\001\066\001\066\001\067\001\
\068\001\066\001\066\001\070\001\072\001\069\001\073\001\065\001\
\076\001\077\001\078\001\079\001\080\001\081\001\082\001\083\001\
\084\001\085\001\086\001\001\001\002\001\003\001\004\001\005\001\
\021\001\022\001\023\001\024\001\025\001\026\001\065\001\070\001\
\067\001\065\001\073\001\070\001\071\001\072\001\073\001\065\001\
\008\001\009\001\010\001\011\001\012\001\070\001\028\001\029\001\
\073\001\017\001\018\001\019\001\020\001\021\001\065\001\065\001\
\024\001\065\001\026\001\069\001\072\001\073\001\072\001\073\001\
\072\001\073\001\066\001\049\001\050\001\051\001\066\001\070\001\
\054\001\055\001\073\001\066\001\058\001\072\001\088\001\089\001\
\090\001\063\001\064\001\072\001\066\001\070\001\068\001\071\001\
\073\001\065\001\072\001\088\001\089\001\090\001\076\001\077\001\
\078\001\079\001\080\001\081\001\082\001\083\001\084\001\085\001\
\086\001\006\001\065\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\065\001\016\001\017\001\018\001\019\001\020\001\
\088\001\089\001\090\001\024\001\065\001\026\001\066\001\021\001\
\001\001\030\001\024\001\006\001\026\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\065\001\016\001\017\001\018\001\
\019\001\020\001\073\001\072\001\073\001\024\001\071\001\026\001\
\072\001\065\001\070\001\030\001\070\001\073\001\065\001\073\001\
\072\001\073\001\072\001\073\001\065\001\072\001\073\001\068\001\
\069\001\087\001\021\001\072\001\073\001\024\001\065\001\026\001\
\088\001\089\001\090\001\005\001\074\001\088\001\089\001\090\001\
\065\001\072\001\073\001\088\001\089\001\090\001\065\001\072\001\
\073\001\068\001\088\001\089\001\090\001\072\001\073\001\065\001\
\072\001\073\001\072\001\073\001\065\001\021\001\072\001\073\001\
\024\001\066\001\215\000\216\000\069\001\088\001\089\001\090\001\
\006\001\070\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\072\001\016\001\017\001\018\001\019\001\020\001\088\001\
\089\001\090\001\024\001\005\001\026\001\088\001\089\001\090\001\
\030\001\073\001\006\001\072\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\067\001\016\001\017\001\018\001\019\001\
\020\001\036\000\037\000\065\001\024\001\066\001\026\001\233\000\
\234\000\005\001\030\001\011\001\012\001\041\001\042\001\065\001\
\088\001\089\001\090\001\065\001\178\001\179\001\068\001\051\001\
\052\001\053\001\072\001\073\001\030\000\031\000\065\001\065\001\
\065\001\065\001\065\001\063\001\064\001\067\001\066\001\072\001\
\073\001\069\001\088\001\089\001\090\001\065\001\067\001\065\001\
\068\001\072\001\065\001\065\001\072\001\073\001\065\001\088\001\
\089\001\090\001\065\001\065\001\021\001\065\001\065\001\024\001\
\066\001\002\000\014\000\069\001\088\001\089\001\090\001\006\001\
\096\000\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\206\000\016\001\017\001\018\001\019\001\020\001\088\001\089\001\
\090\001\024\001\230\001\026\001\061\000\114\000\254\000\030\001\
\106\000\006\001\115\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\067\001\016\001\017\001\018\001\019\001\020\001\
\138\000\135\001\004\001\024\001\065\001\026\001\174\000\016\001\
\118\000\030\001\222\000\072\001\073\001\089\002\120\002\088\001\
\089\001\090\001\065\001\253\000\252\000\068\001\255\255\255\255\
\255\255\072\001\073\001\088\001\089\001\090\001\065\001\255\255\
\255\255\255\255\255\255\255\255\255\255\072\001\073\001\255\255\
\255\255\088\001\089\001\090\001\065\001\255\255\255\255\068\001\
\255\255\255\255\255\255\072\001\073\001\088\001\089\001\090\001\
\255\255\255\255\255\255\255\255\255\255\008\001\009\001\010\001\
\011\001\012\001\255\255\088\001\089\001\090\001\017\001\018\001\
\019\001\020\001\021\001\255\255\255\255\024\001\008\001\009\001\
\010\001\011\001\012\001\255\255\255\255\255\255\255\255\017\001\
\018\001\019\001\020\001\021\001\255\255\255\255\024\001\030\001\
\001\001\255\255\255\255\255\255\255\255\006\001\255\255\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\255\255\016\001\
\017\001\018\001\019\001\020\001\001\001\255\255\255\255\255\255\
\255\255\006\001\255\255\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\065\001\016\001\017\001\018\001\019\001\020\001\
\255\255\072\001\073\001\255\255\255\255\088\001\089\001\090\001\
\255\255\255\255\051\001\255\255\255\255\255\255\255\255\255\255\
\255\255\088\001\089\001\090\001\255\255\255\255\088\001\089\001\
\090\001\066\001\255\255\255\255\069\001\255\255\051\001\072\001\
\073\001\255\255\255\255\065\001\255\255\067\001\255\255\030\001\
\070\001\071\001\072\001\073\001\065\001\066\001\001\001\255\255\
\069\001\255\255\255\255\006\001\073\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\255\255\016\001\017\001\018\001\
\019\001\020\001\001\001\002\001\003\001\004\001\005\001\255\255\
\255\255\255\255\065\001\255\255\255\255\255\255\069\001\255\255\
\255\255\072\001\073\001\255\255\255\255\001\001\002\001\003\001\
\004\001\005\001\255\255\255\255\255\255\028\001\255\255\255\255\
\051\001\088\001\089\001\090\001\255\255\255\255\255\255\001\001\
\002\001\003\001\004\001\005\001\255\255\255\255\255\255\066\001\
\028\001\255\255\049\001\050\001\051\001\072\001\255\255\054\001\
\055\001\255\255\255\255\058\001\255\255\255\255\255\255\030\001\
\063\001\064\001\028\001\066\001\255\255\049\001\050\001\051\001\
\255\255\072\001\054\001\055\001\255\255\255\255\058\001\255\255\
\255\255\255\255\030\001\063\001\064\001\255\255\066\001\049\001\
\050\001\051\001\070\001\030\001\054\001\055\001\255\255\255\255\
\058\001\255\255\065\001\255\255\255\255\063\001\064\001\255\255\
\066\001\072\001\073\001\255\255\070\001\001\001\002\001\003\001\
\004\001\005\001\255\255\255\255\255\255\065\001\255\255\255\255\
\255\255\088\001\089\001\090\001\072\001\073\001\065\001\001\001\
\002\001\003\001\004\001\005\001\255\255\072\001\073\001\255\255\
\028\001\255\255\255\255\255\255\088\001\089\001\090\001\255\255\
\030\001\255\255\255\255\255\255\255\255\088\001\089\001\090\001\
\255\255\255\255\028\001\255\255\255\255\049\001\050\001\051\001\
\255\255\255\255\054\001\055\001\255\255\255\255\058\001\255\255\
\255\255\255\255\255\255\063\001\064\001\255\255\066\001\049\001\
\050\001\051\001\070\001\065\001\054\001\055\001\255\255\255\255\
\058\001\255\255\072\001\073\001\255\255\063\001\064\001\255\255\
\066\001\255\255\255\255\255\255\070\001\001\001\002\001\003\001\
\004\001\005\001\088\001\089\001\090\001\065\001\255\255\067\001\
\255\255\255\255\070\001\071\001\072\001\073\001\255\255\001\001\
\002\001\003\001\004\001\005\001\255\255\255\255\255\255\006\001\
\028\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\255\255\016\001\017\001\018\001\019\001\020\001\255\255\255\255\
\255\255\255\255\028\001\255\255\255\255\049\001\050\001\051\001\
\255\255\255\255\054\001\055\001\255\255\255\255\058\001\255\255\
\255\255\255\255\255\255\063\001\064\001\255\255\066\001\049\001\
\050\001\051\001\070\001\255\255\054\001\055\001\255\255\255\255\
\058\001\255\255\255\255\255\255\255\255\063\001\064\001\255\255\
\066\001\255\255\065\001\255\255\070\001\001\001\002\001\003\001\
\004\001\005\001\255\255\006\001\255\255\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\255\255\016\001\017\001\018\001\
\019\001\020\001\255\255\255\255\255\255\024\001\255\255\026\001\
\028\001\255\255\255\255\030\001\255\255\255\255\041\001\042\001\
\255\255\255\255\255\255\255\255\255\255\255\255\049\001\050\001\
\051\001\052\001\053\001\255\255\255\255\049\001\050\001\051\001\
\255\255\255\255\054\001\055\001\063\001\064\001\058\001\066\001\
\255\255\255\255\069\001\063\001\064\001\255\255\066\001\255\255\
\255\255\068\001\070\001\255\255\255\255\072\001\073\001\006\001\
\255\255\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\255\255\016\001\017\001\018\001\019\001\020\001\255\255\255\255\
\255\255\024\001\255\255\026\001\255\255\255\255\006\001\030\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\255\255\
\016\001\017\001\018\001\019\001\020\001\255\255\255\255\255\255\
\024\001\255\255\026\001\001\001\002\001\003\001\004\001\005\001\
\065\001\255\255\067\001\255\255\255\255\070\001\071\001\072\001\
\073\001\255\255\255\255\255\255\255\255\068\001\255\255\255\255\
\001\001\072\001\073\001\255\255\255\255\006\001\028\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\255\255\016\001\
\017\001\018\001\019\001\020\001\068\001\255\255\255\255\255\255\
\072\001\073\001\255\255\049\001\050\001\051\001\255\255\255\255\
\054\001\055\001\255\255\255\255\058\001\255\255\255\255\255\255\
\255\255\063\001\064\001\255\255\066\001\255\255\068\001\255\255\
\255\255\255\255\051\001\001\001\002\001\003\001\004\001\005\001\
\065\001\255\255\067\001\255\255\255\255\070\001\071\001\072\001\
\073\001\066\001\255\255\255\255\255\255\001\001\002\001\003\001\
\004\001\005\001\255\255\255\255\255\255\255\255\028\001\255\255\
\001\001\002\001\003\001\004\001\005\001\065\001\255\255\067\001\
\255\255\255\255\070\001\071\001\072\001\073\001\255\255\255\255\
\028\001\255\255\255\255\049\001\050\001\051\001\255\255\255\255\
\054\001\055\001\255\255\028\001\058\001\255\255\255\255\255\255\
\255\255\063\001\064\001\255\255\066\001\049\001\050\001\051\001\
\255\255\255\255\054\001\055\001\255\255\255\255\058\001\255\255\
\255\255\255\255\255\255\063\001\064\001\054\001\066\001\255\255\
\255\255\058\001\255\255\255\255\255\255\255\255\063\001\064\001\
\006\001\066\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\255\255\016\001\017\001\018\001\019\001\020\001\255\255\
\255\255\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\051\001\052\001\
\053\001\255\255\055\001\056\001\057\001\051\001\059\001\060\001\
\061\001\062\001\063\001\064\001\255\255\066\001\255\255\255\255\
\069\001\255\255\071\001\065\001\066\001\255\255\075\001\069\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\051\001\052\001\053\001\
\255\255\055\001\056\001\057\001\255\255\059\001\060\001\061\001\
\062\001\063\001\064\001\065\001\066\001\067\001\255\255\069\001\
\070\001\071\001\072\001\073\001\255\255\075\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\255\255\055\001\
\056\001\057\001\255\255\059\001\060\001\061\001\062\001\255\255\
\255\255\065\001\255\255\067\001\255\255\069\001\070\001\071\001\
\072\001\073\001\255\255\075\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\255\255\055\001\056\001\057\001\
\255\255\059\001\060\001\061\001\062\001\063\001\064\001\255\255\
\066\001\255\255\255\255\069\001\255\255\255\255\072\001\073\001\
\255\255\075\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\255\255\055\001\056\001\057\001\255\255\059\001\
\060\001\061\001\062\001\063\001\064\001\255\255\066\001\255\255\
\255\255\069\001\255\255\255\255\072\001\255\255\255\255\075\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\051\001\052\001\053\001\
\255\255\055\001\056\001\057\001\255\255\059\001\060\001\061\001\
\062\001\063\001\064\001\255\255\066\001\255\255\255\255\069\001\
\255\255\071\001\255\255\255\255\255\255\075\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\255\255\055\001\
\056\001\057\001\255\255\059\001\060\001\061\001\062\001\063\001\
\064\001\065\001\066\001\255\255\255\255\069\001\255\255\255\255\
\255\255\255\255\255\255\075\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\255\255\055\001\056\001\057\001\
\255\255\059\001\060\001\061\001\062\001\063\001\064\001\065\001\
\066\001\255\255\255\255\069\001\255\255\255\255\255\255\255\255\
\255\255\075\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\255\255\055\001\056\001\057\001\255\255\059\001\
\060\001\061\001\062\001\063\001\064\001\255\255\066\001\255\255\
\255\255\069\001\255\255\255\255\255\255\255\255\255\255\075\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\255\255\255\255\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\051\001\052\001\053\001\
\255\255\055\001\056\001\057\001\255\255\059\001\060\001\061\001\
\062\001\255\255\255\255\065\001\255\255\067\001\255\255\255\255\
\070\001\071\001\072\001\073\001\255\255\075\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\255\255\255\255\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\255\255\055\001\
\056\001\057\001\255\255\059\001\060\001\061\001\062\001\255\255\
\255\255\065\001\255\255\067\001\255\255\255\255\070\001\071\001\
\072\001\073\001\255\255\075\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\255\255\
\255\255\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\255\255\055\001\056\001\057\001\
\255\255\059\001\060\001\061\001\062\001\255\255\255\255\065\001\
\255\255\067\001\255\255\255\255\070\001\071\001\072\001\073\001\
\255\255\075\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\255\255\255\255\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\255\255\055\001\056\001\057\001\255\255\059\001\
\060\001\061\001\062\001\255\255\255\255\065\001\255\255\067\001\
\255\255\255\255\070\001\071\001\072\001\073\001\255\255\075\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\255\255\255\255\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\051\001\052\001\053\001\
\255\255\055\001\056\001\057\001\255\255\059\001\060\001\061\001\
\062\001\255\255\255\255\065\001\255\255\067\001\255\255\255\255\
\070\001\071\001\072\001\073\001\255\255\075\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\255\255\255\255\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\255\255\055\001\
\056\001\057\001\255\255\059\001\060\001\061\001\062\001\255\255\
\255\255\065\001\255\255\067\001\255\255\255\255\070\001\071\001\
\072\001\073\001\255\255\075\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\255\255\
\255\255\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\255\255\055\001\056\001\057\001\
\255\255\059\001\060\001\061\001\062\001\255\255\255\255\065\001\
\255\255\067\001\255\255\255\255\070\001\071\001\072\001\073\001\
\255\255\075\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\255\255\255\255\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\255\255\055\001\056\001\057\001\255\255\059\001\
\060\001\061\001\062\001\255\255\255\255\065\001\255\255\067\001\
\255\255\255\255\070\001\071\001\072\001\073\001\255\255\075\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\255\255\255\255\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\051\001\052\001\053\001\
\255\255\055\001\056\001\057\001\255\255\059\001\060\001\061\001\
\062\001\255\255\255\255\065\001\255\255\067\001\255\255\255\255\
\070\001\071\001\072\001\073\001\255\255\075\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\255\255\255\255\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\255\255\055\001\
\056\001\057\001\255\255\059\001\060\001\061\001\062\001\255\255\
\255\255\065\001\255\255\067\001\255\255\255\255\070\001\071\001\
\072\001\073\001\255\255\075\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\255\255\
\255\255\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\255\255\255\255\255\255\255\255\055\001\056\001\057\001\
\255\255\059\001\060\001\061\001\062\001\255\255\255\255\065\001\
\255\255\067\001\255\255\255\255\070\001\071\001\072\001\073\001\
\255\255\075\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\255\255\255\255\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\255\255\
\255\255\255\255\255\255\055\001\056\001\057\001\255\255\059\001\
\060\001\061\001\062\001\255\255\255\255\065\001\255\255\067\001\
\255\255\255\255\070\001\071\001\072\001\073\001\255\255\075\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\255\255\255\255\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\255\255\255\255\255\255\
\255\255\055\001\056\001\057\001\255\255\059\001\060\001\061\001\
\062\001\255\255\255\255\065\001\255\255\067\001\255\255\255\255\
\070\001\071\001\072\001\073\001\255\255\075\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\255\255\255\255\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\255\255\255\255\255\255\255\255\055\001\
\056\001\057\001\255\255\059\001\060\001\061\001\062\001\255\255\
\255\255\065\001\255\255\067\001\255\255\255\255\070\001\071\001\
\072\001\073\001\255\255\075\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\255\255\
\255\255\043\001\044\001\045\001\046\001\047\001\048\001\255\255\
\255\255\255\255\255\255\255\255\255\255\055\001\056\001\057\001\
\255\255\059\001\060\001\061\001\062\001\255\255\255\255\065\001\
\255\255\067\001\255\255\255\255\070\001\071\001\072\001\073\001\
\255\255\075\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\255\255\255\255\043\001\
\044\001\045\001\046\001\047\001\048\001\255\255\255\255\255\255\
\255\255\255\255\255\255\055\001\056\001\057\001\255\255\059\001\
\060\001\061\001\062\001\255\255\255\255\065\001\255\255\067\001\
\255\255\255\255\070\001\071\001\072\001\073\001\255\255\075\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\255\255\255\255\043\001\044\001\045\001\
\046\001\047\001\048\001\255\255\255\255\255\255\255\255\255\255\
\255\255\055\001\056\001\057\001\255\255\059\001\060\001\255\255\
\255\255\255\255\255\255\065\001\255\255\067\001\255\255\255\255\
\070\001\071\001\072\001\073\001\255\255\075\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\255\255\255\255\043\001\044\001\045\001\046\001\047\001\
\048\001\255\255\255\255\255\255\255\255\255\255\255\255\055\001\
\056\001\057\001\255\255\059\001\060\001\255\255\255\255\255\255\
\255\255\065\001\255\255\067\001\255\255\255\255\070\001\071\001\
\072\001\073\001\255\255\075\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\255\255\
\255\255\043\001\044\001\045\001\046\001\047\001\048\001\255\255\
\255\255\255\255\255\255\255\255\255\255\055\001\056\001\057\001\
\255\255\059\001\060\001\255\255\255\255\255\255\255\255\065\001\
\255\255\067\001\255\255\255\255\070\001\071\001\072\001\073\001\
\255\255\075\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\255\255\255\255\043\001\
\044\001\045\001\046\001\047\001\048\001\255\255\255\255\255\255\
\255\255\255\255\255\255\055\001\056\001\057\001\255\255\059\001\
\060\001\255\255\255\255\255\255\255\255\065\001\255\255\067\001\
\255\255\255\255\070\001\071\001\072\001\073\001\255\255\075\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\255\255\255\255\043\001\044\001\065\001\
\255\255\067\001\255\255\255\255\070\001\071\001\072\001\073\001\
\255\255\055\001\056\001\057\001\255\255\059\001\060\001\255\255\
\255\255\255\255\255\255\065\001\255\255\067\001\255\255\255\255\
\070\001\071\001\072\001\073\001\255\255\075\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\255\255\255\255\043\001\044\001\065\001\255\255\067\001\
\255\255\255\255\070\001\071\001\072\001\073\001\255\255\055\001\
\056\001\057\001\255\255\059\001\060\001\255\255\255\255\255\255\
\255\255\065\001\255\255\067\001\255\255\255\255\070\001\071\001\
\072\001\073\001\255\255\075\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\065\001\
\255\255\067\001\255\255\255\255\070\001\071\001\072\001\073\001\
\255\255\255\255\255\255\255\255\255\255\055\001\056\001\057\001\
\255\255\059\001\060\001\255\255\255\255\255\255\255\255\065\001\
\255\255\067\001\255\255\255\255\070\001\071\001\072\001\073\001\
\255\255\075\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\255\255\008\001\009\001\
\010\001\011\001\012\001\255\255\255\255\255\255\255\255\017\001\
\018\001\019\001\020\001\021\001\056\001\057\001\024\001\059\001\
\060\001\255\255\255\255\255\255\255\255\065\001\255\255\067\001\
\255\255\255\255\070\001\071\001\072\001\073\001\255\255\075\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\006\001\255\255\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\255\255\016\001\017\001\018\001\
\019\001\020\001\056\001\255\255\255\255\059\001\060\001\255\255\
\255\255\255\255\255\255\065\001\255\255\067\001\255\255\255\255\
\070\001\071\001\072\001\073\001\255\255\075\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\255\255\255\255\255\255\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\255\255\
\065\001\255\255\067\001\059\001\060\001\070\001\071\001\072\001\
\073\001\065\001\255\255\067\001\255\255\255\255\070\001\071\001\
\072\001\073\001\060\001\075\001\255\255\255\255\255\255\065\001\
\255\255\067\001\255\255\255\255\070\001\071\001\072\001\073\001\
\255\255\075\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\001\001\255\255\255\255\
\255\255\255\255\006\001\255\255\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\255\255\016\001\017\001\018\001\019\001\
\020\001\021\001\255\255\255\255\024\001\065\001\255\255\067\001\
\255\255\255\255\070\001\071\001\072\001\073\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\255\255\055\001\056\001\057\001\255\255\
\059\001\060\001\061\001\062\001\063\001\064\001\255\255\066\001\
\255\255\255\255\069\001\255\255\255\255\255\255\255\255\255\255\
\075\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\255\255\055\001\
\056\001\057\001\255\255\059\001\255\255\061\001\062\001\063\001\
\064\001\255\255\066\001\255\255\255\255\069\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\255\255\055\001\056\001\057\001\255\255\
\255\255\255\255\061\001\062\001\063\001\064\001\255\255\066\001\
\255\255\255\255\069\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\051\001\052\001\053\001\
\255\255\055\001\255\255\057\001\255\255\255\255\255\255\061\001\
\062\001\063\001\064\001\255\255\066\001\255\255\255\255\069\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\255\255\055\001\255\255\
\255\255\255\255\255\255\255\255\061\001\062\001\063\001\064\001\
\255\255\066\001\255\255\255\255\069\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\001\001\002\001\003\001\004\001\005\001\255\255\
\007\001\061\001\062\001\063\001\064\001\255\255\066\001\041\001\
\042\001\069\001\255\255\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\061\001\062\001\063\001\064\001\255\255\
\066\001\041\001\042\001\069\001\255\255\255\255\255\255\255\255\
\255\255\049\001\050\001\051\001\052\001\053\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\061\001\062\001\063\001\
\064\001\001\001\066\001\255\255\255\255\069\001\006\001\255\255\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\255\255\
\016\001\017\001\018\001\019\001\020\001\008\001\009\001\010\001\
\011\001\012\001\255\255\255\255\255\255\255\255\017\001\018\001\
\019\001\020\001\255\255\255\255\255\255\024\001\006\001\026\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\255\255\
\016\001\017\001\018\001\019\001\020\001\006\001\255\255\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\255\255\016\001\
\017\001\018\001\019\001\020\001\006\001\255\255\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\255\255\016\001\017\001\
\018\001\019\001\020\001\006\001\255\255\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\255\255\016\001\017\001\018\001\
\019\001\020\001\006\001\255\255\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\255\255\016\001\017\001\018\001\019\001\
\020\001\006\001\255\255\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\255\255\016\001\017\001\018\001\019\001\020\001\
\006\001\255\255\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\255\255\016\001\017\001\018\001\019\001\020\001\006\001\
\255\255\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\255\255\016\001\017\001\018\001\019\001\020\001\006\001\255\255\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\255\255\
\016\001\017\001\018\001\019\001\020\001\065\001\255\255\067\001\
\255\255\255\255\070\001\071\001\072\001\073\001"

let yynames_const = "\
  EOF\000\
  CHAR\000\
  INT\000\
  DOUBLE\000\
  FLOAT\000\
  VOID\000\
  ENUM\000\
  STRUCT\000\
  TYPEDEF\000\
  UNION\000\
  SIGNED\000\
  UNSIGNED\000\
  LONG\000\
  SHORT\000\
  VOLATILE\000\
  EXTERN\000\
  STATIC\000\
  CONST\000\
  AUTO\000\
  REGISTER\000\
  RESTRICT\000\
  SIZEOF\000\
  ASM\000\
  ARROW\000\
  DOT\000\
  EQ_EQ\000\
  EXCLAM_EQ\000\
  INF\000\
  SUP\000\
  INF_EQ\000\
  SUP_EQ\000\
  PLUS\000\
  MINUS\000\
  STAR\000\
  SLASH\000\
  PERCENT\000\
  TILDE\000\
  AND\000\
  PIPE\000\
  CIRC\000\
  EXCLAM\000\
  AND_AND\000\
  PIPE_PIPE\000\
  INF_INF\000\
  SUP_SUP\000\
  PLUS_PLUS\000\
  MINUS_MINUS\000\
  ATTRIBUTE\000\
  EXTENSION\000\
  INLINE\000\
  "

let yynames_block = "\
  IDENT\000\
  CST_CHAR\000\
  CST_INT\000\
  CST_FLOAT\000\
  CST_STRING\000\
  NAMED_TYPE\000\
  GNU_ATTRS\000\
  EQ\000\
  PLUS_EQ\000\
  MINUS_EQ\000\
  STAR_EQ\000\
  SLASH_EQ\000\
  PERCENT_EQ\000\
  AND_EQ\000\
  PIPE_EQ\000\
  CIRC_EQ\000\
  INF_INF_EQ\000\
  SUP_SUP_EQ\000\
  RPAREN\000\
  LPAREN\000\
  RBRACE\000\
  LBRACE\000\
  LBRACKET\000\
  RBRACKET\000\
  COLON\000\
  SEMICOLON\000\
  COMMA\000\
  ELLIPSIS\000\
  QUEST\000\
  BREAK\000\
  CONTINUE\000\
  GOTO\000\
  RETURN\000\
  SWITCH\000\
  CASE\000\
  DEFAULT\000\
  WHILE\000\
  DO\000\
  FOR\000\
  IF\000\
  ELSE\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.definition list) in
    Obj.repr(
# 265 "cparser.mly"
                (_1)
# 1885 "cparser.ml"
               : Cabs.definition list))
; (fun __caml_parser_env ->
    Obj.repr(
# 268 "cparser.mly"
                   ([])
# 1891 "cparser.ml"
               : Cabs.definition list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition list) in
    Obj.repr(
# 269 "cparser.mly"
                 (List.rev _1)
# 1898 "cparser.ml"
               : Cabs.definition list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition) in
    Obj.repr(
# 272 "cparser.mly"
               ([_1])
# 1905 "cparser.ml"
               : Cabs.definition list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.definition list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition) in
    Obj.repr(
# 273 "cparser.mly"
                      (_2::_1)
# 1913 "cparser.ml"
               : Cabs.definition list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.base_type * Cabs.storage) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.name list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 280 "cparser.mly"
   (DECDEF (set_name_group _1 (List.rev _2)))
# 1922 "cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.base_type * Cabs.storage) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'global_proto) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : (string * int) * (Cabs.definition list * Cabs.statement)) in
    Obj.repr(
# 282 "cparser.mly"
   (
				let (_, base, _, _) = _2 in
				match base with
				  PROTO _ ->
					FUNDEF (set_single _1 _2, (snd _3))
				| OLD_PROTO _ ->
					OLDFUNDEF (set_single _1 _2, [], (snd _3))
				| _ ->
					assert false
			)
# 1940 "cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.base_type * Cabs.storage) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'old_proto) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'old_pardefs) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : (string * int) * (Cabs.definition list * Cabs.statement)) in
    Obj.repr(
# 293 "cparser.mly"
   ( OLDFUNDEF (set_single _1 _2, List.rev _3, (snd _4)) )
# 1950 "cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.base_type * Cabs.storage) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 295 "cparser.mly"
   (ONLYTYPEDEF (set_name_group _1 []))
# 1958 "cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'typedef_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typedef_defs) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 297 "cparser.mly"
   (let _ = List.iter (fun (id, _, _, _) -> Clexer.add_type id) _3 in
			TYPEDEF (set_name_group (fst _2, snd _2) _3, []))
# 1968 "cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'gcc_attribute) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'typedef_type) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'typedef_defs) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 300 "cparser.mly"
   (let _ = List.iter (fun (id, _, _, _) -> Clexer.add_type id) _4 in
			TYPEDEF (set_name_group (fst _3, snd _3) _4, _1))
# 1979 "cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : modifier list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.base_type * modifier list) in
    Obj.repr(
# 305 "cparser.mly"
   (apply_mods (snd _2) (apply_mods _1 ((fst _2), NO_STORAGE)))
# 1987 "cparser.ml"
               : Cabs.base_type * Cabs.storage))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : modifier list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'comp_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : modifier list) in
    Obj.repr(
# 307 "cparser.mly"
   (apply_mods _3 (apply_mods _1 (_2, NO_STORAGE)))
# 1996 "cparser.ml"
               : Cabs.base_type * Cabs.storage))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : modifier list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : modifier list) in
    Obj.repr(
# 309 "cparser.mly"
   (apply_mods _3 (apply_mods _1 (NAMED_TYPE _2, NO_STORAGE)))
# 2005 "cparser.ml"
               : Cabs.base_type * Cabs.storage))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : modifier list) in
    Obj.repr(
# 311 "cparser.mly"
   (apply_mods _1 (NO_TYPE, NO_STORAGE))
# 2012 "cparser.ml"
               : Cabs.base_type * Cabs.storage))
; (fun __caml_parser_env ->
    Obj.repr(
# 314 "cparser.mly"
                   ([])
# 2018 "cparser.ml"
               : modifier list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : modifier list) in
    Obj.repr(
# 315 "cparser.mly"
                       (List.rev _1)
# 2025 "cparser.ml"
               : modifier list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : modifier) in
    Obj.repr(
# 318 "cparser.mly"
                  ([_1])
# 2032 "cparser.ml"
               : modifier list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : modifier list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : modifier) in
    Obj.repr(
# 319 "cparser.mly"
                               (_2::_1)
# 2040 "cparser.ml"
               : modifier list))
; (fun __caml_parser_env ->
    Obj.repr(
# 322 "cparser.mly"
               (BASE_STORAGE STATIC)
# 2046 "cparser.ml"
               : modifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 323 "cparser.mly"
               (BASE_CONST)
# 2052 "cparser.ml"
               : modifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 324 "cparser.mly"
                 (BASE_VOLATILE)
# 2058 "cparser.ml"
               : modifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 325 "cparser.mly"
                (BASE_STORAGE EXTERN)
# 2064 "cparser.ml"
               : modifier))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gcc_attribute) in
    Obj.repr(
# 326 "cparser.mly"
                     ( BASE_GNU_ATTR _1 )
# 2071 "cparser.ml"
               : modifier))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'qual_type) in
    Obj.repr(
# 329 "cparser.mly"
                 (_1)
# 2078 "cparser.ml"
               : Cabs.base_type * modifier list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.base_type * modifier list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'qual_type) in
    Obj.repr(
# 330 "cparser.mly"
                           (apply_qual _1 _2)
# 2086 "cparser.ml"
               : Cabs.base_type * modifier list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.base_type * modifier list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : modifier) in
    Obj.repr(
# 331 "cparser.mly"
                            ((fst _1, _2::(snd _1)))
# 2094 "cparser.ml"
               : Cabs.base_type * modifier list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name) in
    Obj.repr(
# 334 "cparser.mly"
                  ([_1])
# 2101 "cparser.ml"
               : Cabs.name list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.name list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name) in
    Obj.repr(
# 335 "cparser.mly"
                                (_3::_1)
# 2110 "cparser.ml"
               : Cabs.name list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.base_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_gcc_attributes) in
    Obj.repr(
# 339 "cparser.mly"
   ((fst _1, snd _1, _2, NOTHING))
# 2118 "cparser.ml"
               : Cabs.name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.base_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'opt_gcc_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 341 "cparser.mly"
   ((fst _1, snd _1, _2, _4))
# 2128 "cparser.ml"
               : Cabs.name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 345 "cparser.mly"
   ((_1, set_tline NO_TYPE))
# 2135 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.base_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 347 "cparser.mly"
   (_2)
# 2144 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.base_type) in
    Obj.repr(
# 349 "cparser.mly"
   ((fst _2, set_type (PTR NO_TYPE) (snd _2)))
# 2151 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.base_type) in
    Obj.repr(
# 351 "cparser.mly"
   ((fst _3, set_type (CONST (PTR NO_TYPE)) (snd _3)))
# 2158 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.base_type) in
    Obj.repr(
# 353 "cparser.mly"
   ((fst _3, set_type (VOLATILE (PTR NO_TYPE)) (snd _3)))
# 2165 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.base_type) in
    Obj.repr(
# 355 "cparser.mly"
   ((fst _3, set_type (RESTRICT_PTR NO_TYPE) (snd _3)))
# 2172 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.gnu_attrs) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.base_type) in
    Obj.repr(
# 357 "cparser.mly"
   ((fst _3, set_type (GNU_TYPE (_2, PTR NO_TYPE)) (snd _3)))
# 2180 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.base_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 359 "cparser.mly"
   ((fst _1, set_type (ARRAY (NO_TYPE, smooth_expression _3)) (snd _1)))
# 2190 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Cabs.base_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 361 "cparser.mly"
   ((fst _1, set_type (ARRAY (NO_TYPE, NOTHING)) (snd _1)))
# 2199 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.base_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name list * bool) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 363 "cparser.mly"
   ((fst _1, PROTO (snd _1, fst _3, snd _3)))
# 2209 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string * Cabs.base_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name list * bool) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 365 "cparser.mly"
   ((fst _2, set_type (PROTO (NO_TYPE, fst _5, snd _5)) (snd _2)))
# 2221 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.base_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'old_parameters) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 367 "cparser.mly"
   ((fst _1, OLD_PROTO (snd _1, fst _3, snd _3)))
# 2231 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string * Cabs.base_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'old_parameters) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 369 "cparser.mly"
   ((fst _2, set_type (OLD_PROTO (NO_TYPE, fst _5, snd _5)) (snd _2)))
# 2243 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.base_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_gcc_attributes) in
    Obj.repr(
# 373 "cparser.mly"
   (match (snd _1) with
			  PROTO _
			| OLD_PROTO _ ->
				(fst _1, snd _1, _2, NOTHING)
			| _ -> begin (*fatal();*) assert false end)
# 2255 "cparser.ml"
               : 'global_proto))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.base_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_gcc_attributes) in
    Obj.repr(
# 381 "cparser.mly"
   (match (snd _1) with
				  OLD_PROTO _ -> (fst _1, snd _1, _2, NOTHING)
				(*| PROTO (typ, [], ell) -> fst $1, OLD_PROTO (typ, [], ell), $2, NOTHING*)
				| _ -> begin
					(*fatal();
					Cprint.print_type (fun _ -> ()) (snd $1);
					print_string ("[" ^ !Cprint.line ^ "]");*)
					assert false
				end )
# 2271 "cparser.ml"
               : 'old_proto))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'old_pardecs) in
    Obj.repr(
# 395 "cparser.mly"
                   ((List.rev _1, false))
# 2278 "cparser.ml"
               : 'old_parameters))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'old_pardecs) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 396 "cparser.mly"
                          ((List.rev _1, true))
# 2286 "cparser.ml"
               : 'old_parameters))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 399 "cparser.mly"
              ([_1])
# 2293 "cparser.ml"
               : 'old_pardecs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'old_pardecs) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 400 "cparser.mly"
                             (_3::_1)
# 2302 "cparser.ml"
               : 'old_pardecs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'old_pardecs) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 401 "cparser.mly"
                                (_3::_1)
# 2311 "cparser.ml"
               : 'old_pardecs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'old_pardef) in
    Obj.repr(
# 405 "cparser.mly"
                  ([_1])
# 2318 "cparser.ml"
               : 'old_pardefs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'old_pardefs) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'old_pardef) in
    Obj.repr(
# 406 "cparser.mly"
                            (_2::_1)
# 2326 "cparser.ml"
               : 'old_pardefs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'old_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'old_defs) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 410 "cparser.mly"
   (set_name_group _1 (List.rev _2))
# 2335 "cparser.ml"
               : 'old_pardef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'old_mods_opt) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'old_mods_opt) in
    Obj.repr(
# 414 "cparser.mly"
   (apply_mods _3 (apply_mods _1 (NAMED_TYPE _2, NO_STORAGE)))
# 2344 "cparser.ml"
               : 'old_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'old_mods_opt) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'comp_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'old_mods_opt) in
    Obj.repr(
# 416 "cparser.mly"
   (apply_mods _3 (apply_mods _1 (_2, NO_STORAGE)))
# 2353 "cparser.ml"
               : 'old_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'old_mods_opt) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'old_qual) in
    Obj.repr(
# 418 "cparser.mly"
   (apply_mods (snd _2) (apply_mods _1 ((fst _2), NO_STORAGE)))
# 2361 "cparser.ml"
               : 'old_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 421 "cparser.mly"
                   ([])
# 2367 "cparser.ml"
               : 'old_mods_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 422 "cparser.mly"
               ([BASE_CONST])
# 2373 "cparser.ml"
               : 'old_mods_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 423 "cparser.mly"
                 ([BASE_STORAGE REGISTER])
# 2379 "cparser.ml"
               : 'old_mods_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'qual_type) in
    Obj.repr(
# 426 "cparser.mly"
                 (_1)
# 2386 "cparser.ml"
               : 'old_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'old_qual) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'qual_type) in
    Obj.repr(
# 427 "cparser.mly"
                         (apply_qual _1 _2)
# 2394 "cparser.ml"
               : 'old_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'old_qual) in
    Obj.repr(
# 428 "cparser.mly"
                      ((fst _1, BASE_CONST::(snd _1)))
# 2401 "cparser.ml"
               : 'old_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'old_qual) in
    Obj.repr(
# 429 "cparser.mly"
                        ((fst _1, (BASE_STORAGE REGISTER)::(snd _1)))
# 2408 "cparser.ml"
               : 'old_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'old_def) in
    Obj.repr(
# 432 "cparser.mly"
                ([_1])
# 2415 "cparser.ml"
               : 'old_defs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'old_defs) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'old_def) in
    Obj.repr(
# 433 "cparser.mly"
                            (_3::_1)
# 2424 "cparser.ml"
               : 'old_defs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'old_dec) in
    Obj.repr(
# 437 "cparser.mly"
   ((fst _1, snd _1, [], NOTHING))
# 2431 "cparser.ml"
               : 'old_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 441 "cparser.mly"
   ((_1, NO_TYPE))
# 2438 "cparser.ml"
               : 'old_dec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'old_dec) in
    Obj.repr(
# 443 "cparser.mly"
   ((fst _2, set_type (PTR NO_TYPE) (snd _2)))
# 2445 "cparser.ml"
               : 'old_dec))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'old_dec) in
    Obj.repr(
# 445 "cparser.mly"
   ((fst _3, set_type (CONST (PTR NO_TYPE)) (snd _3)))
# 2452 "cparser.ml"
               : 'old_dec))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'old_dec) in
    Obj.repr(
# 447 "cparser.mly"
   ((fst _3, set_type (VOLATILE (PTR NO_TYPE)) (snd _3)))
# 2459 "cparser.ml"
               : 'old_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'old_dec) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 449 "cparser.mly"
   ((fst _1, set_type (ARRAY (NO_TYPE, smooth_expression _3)) (snd _1)))
# 2469 "cparser.ml"
               : 'old_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'old_dec) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 451 "cparser.mly"
   ((fst _1, set_type (ARRAY (NO_TYPE, NOTHING)) (snd _1)))
# 2478 "cparser.ml"
               : 'old_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'old_dec) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name list * bool) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 453 "cparser.mly"
   ((fst _1, PROTO (snd _1, fst _3, snd _3)))
# 2488 "cparser.ml"
               : 'old_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'old_dec) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name list * bool) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 455 "cparser.mly"
   ((fst _2, set_type (PROTO (NO_TYPE, fst _5, snd _5)) (snd _2)))
# 2500 "cparser.ml"
               : 'old_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'old_dec) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 457 "cparser.mly"
   (_2)
# 2509 "cparser.ml"
               : 'old_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.base_type * Cabs.storage) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.name list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 464 "cparser.mly"
   (DECDEF (set_name_group _1 (List.rev _2)))
# 2518 "cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : modifier list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.base_type * modifier list) in
    Obj.repr(
# 468 "cparser.mly"
   (apply_mods (snd _2) (apply_mods _1 ((fst _2), NO_STORAGE)))
# 2526 "cparser.ml"
               : Cabs.base_type * Cabs.storage))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : modifier list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'comp_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : modifier list) in
    Obj.repr(
# 470 "cparser.mly"
   (apply_mods _3 (apply_mods _1 (_2, NO_STORAGE)))
# 2535 "cparser.ml"
               : Cabs.base_type * Cabs.storage))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : modifier list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : modifier list) in
    Obj.repr(
# 472 "cparser.mly"
   (apply_mods _3 (apply_mods _1 (NAMED_TYPE _2, NO_STORAGE)))
# 2544 "cparser.ml"
               : Cabs.base_type * Cabs.storage))
; (fun __caml_parser_env ->
    Obj.repr(
# 475 "cparser.mly"
                   ([])
# 2550 "cparser.ml"
               : modifier list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : modifier list) in
    Obj.repr(
# 476 "cparser.mly"
                      (List.rev _1)
# 2557 "cparser.ml"
               : modifier list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : modifier) in
    Obj.repr(
# 479 "cparser.mly"
                 ([_1])
# 2564 "cparser.ml"
               : modifier list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : modifier list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : modifier) in
    Obj.repr(
# 480 "cparser.mly"
                             (_2::_1)
# 2572 "cparser.ml"
               : modifier list))
; (fun __caml_parser_env ->
    Obj.repr(
# 483 "cparser.mly"
               ( BASE_STORAGE STATIC )
# 2578 "cparser.ml"
               : modifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 484 "cparser.mly"
              ( BASE_STORAGE AUTO )
# 2584 "cparser.ml"
               : modifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 485 "cparser.mly"
               ( BASE_CONST )
# 2590 "cparser.ml"
               : modifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 486 "cparser.mly"
                 ( BASE_VOLATILE )
# 2596 "cparser.ml"
               : modifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 487 "cparser.mly"
                 ( BASE_STORAGE REGISTER )
# 2602 "cparser.ml"
               : modifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 488 "cparser.mly"
                ( BASE_STORAGE EXTERN )
# 2608 "cparser.ml"
               : modifier))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gcc_attribute) in
    Obj.repr(
# 489 "cparser.mly"
                     ( BASE_GNU_ATTR _1 )
# 2615 "cparser.ml"
               : modifier))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'qual_type) in
    Obj.repr(
# 492 "cparser.mly"
                 (_1)
# 2622 "cparser.ml"
               : Cabs.base_type * modifier list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.base_type * modifier list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'qual_type) in
    Obj.repr(
# 493 "cparser.mly"
                          (apply_qual _1 _2)
# 2630 "cparser.ml"
               : Cabs.base_type * modifier list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.base_type * modifier list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : modifier) in
    Obj.repr(
# 494 "cparser.mly"
                          ((fst _1, _2::(snd _1)))
# 2638 "cparser.ml"
               : Cabs.base_type * modifier list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name) in
    Obj.repr(
# 497 "cparser.mly"
                 ([_1])
# 2645 "cparser.ml"
               : Cabs.name list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.name list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name) in
    Obj.repr(
# 498 "cparser.mly"
                               (_3::_1)
# 2654 "cparser.ml"
               : Cabs.name list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.base_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_gcc_attributes) in
    Obj.repr(
# 502 "cparser.mly"
   ((fst _1, snd _1, _2, NOTHING))
# 2662 "cparser.ml"
               : Cabs.name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.base_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'opt_gcc_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 504 "cparser.mly"
   ((fst _1, snd _1, _2, _4))
# 2672 "cparser.ml"
               : Cabs.name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 508 "cparser.mly"
   ((_1, NO_TYPE))
# 2679 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 510 "cparser.mly"
   (Clexer.add_identifier _1;(_1, NO_TYPE))
# 2686 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.base_type) in
    Obj.repr(
# 512 "cparser.mly"
   ((fst _2, set_type (PTR NO_TYPE) (snd _2)))
# 2693 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.base_type) in
    Obj.repr(
# 514 "cparser.mly"
   ((fst _3, set_type (RESTRICT_PTR NO_TYPE) (snd _3)))
# 2700 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.base_type) in
    Obj.repr(
# 516 "cparser.mly"
   ((fst _3, set_type (CONST (PTR NO_TYPE)) (snd _3)))
# 2707 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.base_type) in
    Obj.repr(
# 518 "cparser.mly"
   ((fst _3, set_type (VOLATILE (PTR NO_TYPE)) (snd _3)))
# 2714 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.gnu_attrs) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.base_type) in
    Obj.repr(
# 520 "cparser.mly"
   ((fst _3, set_type (GNU_TYPE (_2, PTR NO_TYPE)) (snd _3)))
# 2722 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.base_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 522 "cparser.mly"
   ((fst _1, set_type (ARRAY (NO_TYPE, smooth_expression _3)) (snd _1)))
# 2732 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Cabs.base_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 524 "cparser.mly"
   ((fst _1, set_type (ARRAY (NO_TYPE, NOTHING)) (snd _1)))
# 2741 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.base_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name list * bool) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 526 "cparser.mly"
   ((fst _1, PROTO (snd _1, fst _3, snd _3)))
# 2751 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string * Cabs.base_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name list * bool) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 528 "cparser.mly"
   ((fst _2, set_type (PROTO (NO_TYPE, fst _5, snd _5)) (snd _2)))
# 2763 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.base_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 530 "cparser.mly"
   (_2)
# 2772 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typedef_sub) in
    Obj.repr(
# 537 "cparser.mly"
   (apply_mods (snd _1) ((fst _1), NO_STORAGE))
# 2779 "cparser.ml"
               : 'typedef_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'typedef_sub) in
    Obj.repr(
# 539 "cparser.mly"
   (apply_mods (BASE_CONST::(snd _2)) ((fst _2), NO_STORAGE))
# 2786 "cparser.ml"
               : 'typedef_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'typedef_sub) in
    Obj.repr(
# 541 "cparser.mly"
   (apply_mods (BASE_VOLATILE::(snd _2)) ((fst _2), NO_STORAGE))
# 2793 "cparser.ml"
               : 'typedef_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 544 "cparser.mly"
                  ((NAMED_TYPE _1, []))
# 2800 "cparser.ml"
               : 'typedef_sub))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'comp_type) in
    Obj.repr(
# 545 "cparser.mly"
                  ((_1, []))
# 2807 "cparser.ml"
               : 'typedef_sub))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typedef_qual) in
    Obj.repr(
# 546 "cparser.mly"
                    (_1)
# 2814 "cparser.ml"
               : 'typedef_sub))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 548 "cparser.mly"
               ( Clexer.add_type _1; (NAMED_TYPE _1, []))
# 2821 "cparser.ml"
               : 'typedef_sub))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 549 "cparser.mly"
                       ((NAMED_TYPE _1, [BASE_CONST]))
# 2828 "cparser.ml"
               : 'typedef_sub))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 550 "cparser.mly"
                          ((NAMED_TYPE _1, [BASE_VOLATILE]))
# 2835 "cparser.ml"
               : 'typedef_sub))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'comp_type) in
    Obj.repr(
# 551 "cparser.mly"
                       ((_1, [BASE_CONST]))
# 2842 "cparser.ml"
               : 'typedef_sub))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'comp_type) in
    Obj.repr(
# 552 "cparser.mly"
                         ((_1, [BASE_VOLATILE]))
# 2849 "cparser.ml"
               : 'typedef_sub))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 553 "cparser.mly"
                    ( Clexer.add_type _1; (NAMED_TYPE _1, [BASE_CONST]))
# 2856 "cparser.ml"
               : 'typedef_sub))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 554 "cparser.mly"
                      ( Clexer.add_type _1; (NAMED_TYPE _1, [BASE_VOLATILE]))
# 2863 "cparser.ml"
               : 'typedef_sub))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'qual_type) in
    Obj.repr(
# 557 "cparser.mly"
                 (_1)
# 2870 "cparser.ml"
               : 'typedef_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typedef_qual) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'qual_type) in
    Obj.repr(
# 558 "cparser.mly"
                            (apply_qual _1 _2)
# 2878 "cparser.ml"
               : 'typedef_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typedef_qual) in
    Obj.repr(
# 559 "cparser.mly"
                         ((fst _1, BASE_CONST::(snd _1)))
# 2885 "cparser.ml"
               : 'typedef_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typedef_qual) in
    Obj.repr(
# 560 "cparser.mly"
                           ((fst _1, BASE_VOLATILE::(snd _1)))
# 2892 "cparser.ml"
               : 'typedef_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typedef_def) in
    Obj.repr(
# 563 "cparser.mly"
                   ([_1])
# 2899 "cparser.ml"
               : 'typedef_defs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typedef_defs) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typedef_def) in
    Obj.repr(
# 564 "cparser.mly"
                                  (_3::_1)
# 2908 "cparser.ml"
               : 'typedef_defs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typedef_dec) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_gcc_attributes) in
    Obj.repr(
# 568 "cparser.mly"
   ((fst _1, snd _1, _2, NOTHING))
# 2916 "cparser.ml"
               : 'typedef_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 572 "cparser.mly"
   ((_1, NO_TYPE))
# 2923 "cparser.ml"
               : 'typedef_dec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'typedef_dec) in
    Obj.repr(
# 574 "cparser.mly"
   ((fst _2, set_type (PTR NO_TYPE) (snd _2)))
# 2930 "cparser.ml"
               : 'typedef_dec))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typedef_dec) in
    Obj.repr(
# 576 "cparser.mly"
   ((fst _3, set_type (RESTRICT_PTR NO_TYPE) (snd _3)))
# 2937 "cparser.ml"
               : 'typedef_dec))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typedef_dec) in
    Obj.repr(
# 578 "cparser.mly"
   ((fst _3, set_type (CONST (PTR NO_TYPE)) (snd _3)))
# 2944 "cparser.ml"
               : 'typedef_dec))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typedef_dec) in
    Obj.repr(
# 580 "cparser.mly"
   ((fst _3, set_type (VOLATILE (PTR NO_TYPE)) (snd _3)))
# 2951 "cparser.ml"
               : 'typedef_dec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.gnu_attrs) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typedef_dec) in
    Obj.repr(
# 582 "cparser.mly"
   ((fst _3, set_type (GNU_TYPE (_2, PTR NO_TYPE)) (snd _3)))
# 2959 "cparser.ml"
               : 'typedef_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'typedef_dec) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 584 "cparser.mly"
   ((fst _1, set_type (ARRAY (NO_TYPE, smooth_expression _3)) (snd _1)))
# 2969 "cparser.ml"
               : 'typedef_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typedef_dec) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 586 "cparser.mly"
   ((fst _1, set_type (ARRAY (NO_TYPE, NOTHING)) (snd _1)))
# 2978 "cparser.ml"
               : 'typedef_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'typedef_dec) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name list * bool) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 588 "cparser.mly"
   ((fst _1, PROTO (snd _1, fst _3, snd _3)))
# 2988 "cparser.ml"
               : 'typedef_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'typedef_dec) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name list * bool) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 590 "cparser.mly"
   ((fst _2, set_type (PROTO (NO_TYPE, fst _5, snd _5)) (snd _2)))
# 3000 "cparser.ml"
               : 'typedef_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'typedef_dec) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 592 "cparser.mly"
   (_2)
# 3009 "cparser.ml"
               : 'typedef_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'field_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'field) in
    Obj.repr(
# 598 "cparser.mly"
                      (_2::_1)
# 3017 "cparser.ml"
               : 'field_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'field) in
    Obj.repr(
# 599 "cparser.mly"
               ([_1])
# 3024 "cparser.ml"
               : 'field_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'field_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'field_defs) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 602 "cparser.mly"
                                  (set_name_group _1 (List.rev _2))
# 3033 "cparser.ml"
               : 'field))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'field_mod_list_opt) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'field_qual) in
    Obj.repr(
# 606 "cparser.mly"
  (apply_mods (snd _2) (apply_mods _1 ((fst _2), NO_STORAGE)))
# 3041 "cparser.ml"
               : 'field_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'field_mod_list_opt) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'comp_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'field_mod_list_opt) in
    Obj.repr(
# 608 "cparser.mly"
  (apply_mods _3 (apply_mods _1 (_2, NO_STORAGE)))
# 3050 "cparser.ml"
               : 'field_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'field_mod_list_opt) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'field_mod_list_opt) in
    Obj.repr(
# 610 "cparser.mly"
  (apply_mods _3 (apply_mods _1 (NAMED_TYPE _2, NO_STORAGE)))
# 3059 "cparser.ml"
               : 'field_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 613 "cparser.mly"
                   ([])
# 3065 "cparser.ml"
               : 'field_mod_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'field_mod_list) in
    Obj.repr(
# 614 "cparser.mly"
                      (List.rev _1)
# 3072 "cparser.ml"
               : 'field_mod_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'field_mod) in
    Obj.repr(
# 617 "cparser.mly"
                 ([_1])
# 3079 "cparser.ml"
               : 'field_mod_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'field_mod_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'field_mod) in
    Obj.repr(
# 618 "cparser.mly"
                             (_2::_1)
# 3087 "cparser.ml"
               : 'field_mod_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 621 "cparser.mly"
              (BASE_CONST)
# 3093 "cparser.ml"
               : 'field_mod))
; (fun __caml_parser_env ->
    Obj.repr(
# 622 "cparser.mly"
                 (BASE_VOLATILE)
# 3099 "cparser.ml"
               : 'field_mod))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gcc_attribute) in
    Obj.repr(
# 623 "cparser.mly"
                     ( BASE_GNU_ATTR _1 )
# 3106 "cparser.ml"
               : 'field_mod))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'qual_type) in
    Obj.repr(
# 626 "cparser.mly"
                 (_1)
# 3113 "cparser.ml"
               : 'field_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'field_qual) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'qual_type) in
    Obj.repr(
# 627 "cparser.mly"
                          (apply_qual _1 _2)
# 3121 "cparser.ml"
               : 'field_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'field_qual) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'field_mod) in
    Obj.repr(
# 628 "cparser.mly"
                          ((fst _1, _2::(snd _1)))
# 3129 "cparser.ml"
               : 'field_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'field_defs) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'field_def) in
    Obj.repr(
# 631 "cparser.mly"
                              (_3::_1)
# 3138 "cparser.ml"
               : 'field_defs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'field_def) in
    Obj.repr(
# 632 "cparser.mly"
                  ([_1])
# 3145 "cparser.ml"
               : 'field_defs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'field_dec) in
    Obj.repr(
# 635 "cparser.mly"
                 ((fst _1, snd _1, [], NOTHING))
# 3152 "cparser.ml"
               : 'field_def))
; (fun __caml_parser_env ->
    Obj.repr(
# 639 "cparser.mly"
   (("", NO_TYPE))
# 3158 "cparser.ml"
               : 'field_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 641 "cparser.mly"
   ((_1, NO_TYPE))
# 3165 "cparser.ml"
               : 'field_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 643 "cparser.mly"
   ((_1, NO_TYPE))
# 3172 "cparser.ml"
               : 'field_dec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'field_dec) in
    Obj.repr(
# 645 "cparser.mly"
   ((fst _2, set_type (PTR NO_TYPE) (snd _2)))
# 3179 "cparser.ml"
               : 'field_dec))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'field_dec) in
    Obj.repr(
# 647 "cparser.mly"
   ((fst _3, set_type (RESTRICT_PTR NO_TYPE) (snd _3)))
# 3186 "cparser.ml"
               : 'field_dec))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'field_dec) in
    Obj.repr(
# 649 "cparser.mly"
   ((fst _3, set_type (CONST (PTR NO_TYPE)) (snd _3)))
# 3193 "cparser.ml"
               : 'field_dec))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'field_dec) in
    Obj.repr(
# 651 "cparser.mly"
   ((fst _3, set_type (VOLATILE (PTR NO_TYPE)) (snd _3)))
# 3200 "cparser.ml"
               : 'field_dec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.gnu_attrs) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'field_dec) in
    Obj.repr(
# 653 "cparser.mly"
   ((fst _3, set_type (GNU_TYPE (_2, PTR NO_TYPE)) (snd _3)))
# 3208 "cparser.ml"
               : 'field_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'field_dec) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 655 "cparser.mly"
   ((fst _1, set_type (ARRAY (NO_TYPE, smooth_expression _3)) (snd _1)))
# 3218 "cparser.ml"
               : 'field_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'field_dec) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 657 "cparser.mly"
   ((fst _1, set_type (ARRAY (NO_TYPE, NOTHING)) (snd _1)))
# 3227 "cparser.ml"
               : 'field_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'field_dec) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name list * bool) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 659 "cparser.mly"
   ((fst _1, PROTO (snd _1, fst _3, snd _3)))
# 3237 "cparser.ml"
               : 'field_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'field_dec) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name list * bool) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 661 "cparser.mly"
   ((fst _2, set_type (PROTO (NO_TYPE, fst _5, snd _5)) (snd _2)))
# 3249 "cparser.ml"
               : 'field_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'field_dec) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 663 "cparser.mly"
   (_2)
# 3258 "cparser.ml"
               : 'field_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 665 "cparser.mly"
   ((_1, BITFIELD (NO_SIGN, _3)))
# 3267 "cparser.ml"
               : 'field_dec))
; (fun __caml_parser_env ->
    Obj.repr(
# 671 "cparser.mly"
                   (([], false))
# 3273 "cparser.ml"
               : Cabs.single_name list * bool))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param_list) in
    Obj.repr(
# 672 "cparser.mly"
                   ((List.rev _1, false))
# 3280 "cparser.ml"
               : Cabs.single_name list * bool))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'param_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 673 "cparser.mly"
                              ((List.rev _1, true))
# 3289 "cparser.ml"
               : Cabs.single_name list * bool))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'param_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'param) in
    Obj.repr(
# 676 "cparser.mly"
                           (_3::_1)
# 3298 "cparser.ml"
               : 'param_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param) in
    Obj.repr(
# 677 "cparser.mly"
               ([_1])
# 3305 "cparser.ml"
               : 'param_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'param_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'param_def) in
    Obj.repr(
# 681 "cparser.mly"
   (set_single _1 _2)
# 3313 "cparser.ml"
               : 'param))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'param_mods_opt) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'param_mods_opt) in
    Obj.repr(
# 685 "cparser.mly"
   (apply_mods _3 (apply_mods _1 (NAMED_TYPE _2, NO_STORAGE)))
# 3322 "cparser.ml"
               : 'param_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'param_mods_opt) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'comp_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'param_mods_opt) in
    Obj.repr(
# 687 "cparser.mly"
   (apply_mods _3 (apply_mods _1 (_2, NO_STORAGE)))
# 3331 "cparser.ml"
               : 'param_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'param_mods_opt) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'param_qual) in
    Obj.repr(
# 689 "cparser.mly"
   (apply_mods (snd _2) (apply_mods _1 ((fst _2), NO_STORAGE)))
# 3339 "cparser.ml"
               : 'param_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 692 "cparser.mly"
                   ([])
# 3345 "cparser.ml"
               : 'param_mods_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param_mods) in
    Obj.repr(
# 693 "cparser.mly"
                   (List.rev _1)
# 3352 "cparser.ml"
               : 'param_mods_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param_mod) in
    Obj.repr(
# 696 "cparser.mly"
                 ([_1])
# 3359 "cparser.ml"
               : 'param_mods))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'param_mods) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'param_mod) in
    Obj.repr(
# 697 "cparser.mly"
                          (_2::_1)
# 3367 "cparser.ml"
               : 'param_mods))
; (fun __caml_parser_env ->
    Obj.repr(
# 700 "cparser.mly"
              (BASE_CONST)
# 3373 "cparser.ml"
               : 'param_mod))
; (fun __caml_parser_env ->
    Obj.repr(
# 701 "cparser.mly"
                 (BASE_STORAGE REGISTER)
# 3379 "cparser.ml"
               : 'param_mod))
; (fun __caml_parser_env ->
    Obj.repr(
# 702 "cparser.mly"
                 (BASE_VOLATILE)
# 3385 "cparser.ml"
               : 'param_mod))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gcc_attribute) in
    Obj.repr(
# 703 "cparser.mly"
                     ( BASE_GNU_ATTR _1 )
# 3392 "cparser.ml"
               : 'param_mod))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'qual_type) in
    Obj.repr(
# 706 "cparser.mly"
                 (_1)
# 3399 "cparser.ml"
               : 'param_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'param_qual) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'qual_type) in
    Obj.repr(
# 707 "cparser.mly"
                          (apply_qual _1 _2)
# 3407 "cparser.ml"
               : 'param_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'param_qual) in
    Obj.repr(
# 708 "cparser.mly"
                       ((fst _1, BASE_CONST::(snd _1)))
# 3414 "cparser.ml"
               : 'param_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'param_qual) in
    Obj.repr(
# 709 "cparser.mly"
                          ((fst _1, (BASE_STORAGE REGISTER)::(snd _1)))
# 3421 "cparser.ml"
               : 'param_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'param_qual) in
    Obj.repr(
# 710 "cparser.mly"
                          ((fst _1, BASE_VOLATILE::(snd _1)))
# 3428 "cparser.ml"
               : 'param_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'param_qual) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'gcc_attribute) in
    Obj.repr(
# 711 "cparser.mly"
                             ((fst _1, (BASE_GNU_ATTR _2)::(snd _1)))
# 3436 "cparser.ml"
               : 'param_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param_dec) in
    Obj.repr(
# 715 "cparser.mly"
   ( let (name, _type) = _1 in (name, _type, [], NOTHING) )
# 3443 "cparser.ml"
               : 'param_def))
; (fun __caml_parser_env ->
    Obj.repr(
# 719 "cparser.mly"
   ( ("", NO_TYPE) )
# 3449 "cparser.ml"
               : 'param_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 721 "cparser.mly"
   ( (_1, NO_TYPE) )
# 3456 "cparser.ml"
               : 'param_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 723 "cparser.mly"
   ( (_1, NO_TYPE) )
# 3463 "cparser.ml"
               : 'param_dec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'param_dec) in
    Obj.repr(
# 725 "cparser.mly"
   ((fst _2, set_type (PTR NO_TYPE) (snd _2)))
# 3470 "cparser.ml"
               : 'param_dec))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'param_dec) in
    Obj.repr(
# 727 "cparser.mly"
   ((fst _3, set_type (RESTRICT_PTR NO_TYPE) (snd _3)))
# 3477 "cparser.ml"
               : 'param_dec))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'param_dec) in
    Obj.repr(
# 729 "cparser.mly"
   ((fst _3, set_type (CONST (PTR NO_TYPE)) (snd _3)))
# 3484 "cparser.ml"
               : 'param_dec))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'param_dec) in
    Obj.repr(
# 731 "cparser.mly"
   ((fst _3, set_type (VOLATILE (PTR NO_TYPE)) (snd _3)))
# 3491 "cparser.ml"
               : 'param_dec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.gnu_attrs) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'param_dec) in
    Obj.repr(
# 733 "cparser.mly"
   ((fst _3, set_type (GNU_TYPE (_2, PTR NO_TYPE)) (snd _3)))
# 3499 "cparser.ml"
               : 'param_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'param_dec) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 735 "cparser.mly"
   ((fst _1, set_type (ARRAY (NO_TYPE, smooth_expression _3)) (snd _1)))
# 3509 "cparser.ml"
               : 'param_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'param_dec) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 737 "cparser.mly"
   ((fst _1, set_type (ARRAY (NO_TYPE, NOTHING)) (snd _1)))
# 3518 "cparser.ml"
               : 'param_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'param_dec) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name list * bool) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 739 "cparser.mly"
   ((fst _2, set_type (PROTO (NO_TYPE, fst _5, snd _5)) (snd _2)))
# 3530 "cparser.ml"
               : 'param_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'param_dec) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 741 "cparser.mly"
   (_2)
# 3539 "cparser.ml"
               : 'param_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'only_type_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'only_def) in
    Obj.repr(
# 748 "cparser.mly"
   (set_type (fst _1) _2)
# 3547 "cparser.ml"
               : 'only_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'only_mod_list_opt) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'only_qual) in
    Obj.repr(
# 752 "cparser.mly"
  (apply_mods (snd _2) (apply_mods _1 ((fst _2), NO_STORAGE)))
# 3555 "cparser.ml"
               : 'only_type_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'only_mod_list_opt) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'comp_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'only_mod_list_opt) in
    Obj.repr(
# 754 "cparser.mly"
  (apply_mods _3 (apply_mods _1 (_2, NO_STORAGE)))
# 3564 "cparser.ml"
               : 'only_type_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'only_mod_list_opt) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'only_mod_list_opt) in
    Obj.repr(
# 756 "cparser.mly"
   (apply_mods _3 (apply_mods _1 (NAMED_TYPE _2, NO_STORAGE)))
# 3573 "cparser.ml"
               : 'only_type_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 759 "cparser.mly"
                   ([])
# 3579 "cparser.ml"
               : 'only_mod_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'only_mod_list) in
    Obj.repr(
# 760 "cparser.mly"
                     (List.rev _1)
# 3586 "cparser.ml"
               : 'only_mod_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'qual_type) in
    Obj.repr(
# 763 "cparser.mly"
                 (_1)
# 3593 "cparser.ml"
               : 'only_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'only_qual) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'qual_type) in
    Obj.repr(
# 764 "cparser.mly"
                          (apply_qual _1 _2)
# 3601 "cparser.ml"
               : 'only_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'only_qual) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'only_mod) in
    Obj.repr(
# 765 "cparser.mly"
                         ((fst _1, _2::(snd _1)))
# 3609 "cparser.ml"
               : 'only_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'only_mod) in
    Obj.repr(
# 768 "cparser.mly"
                ([_1])
# 3616 "cparser.ml"
               : 'only_mod_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'only_mod_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'only_mod) in
    Obj.repr(
# 769 "cparser.mly"
                           (_2::_1)
# 3624 "cparser.ml"
               : 'only_mod_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 772 "cparser.mly"
              (BASE_CONST)
# 3630 "cparser.ml"
               : 'only_mod))
; (fun __caml_parser_env ->
    Obj.repr(
# 773 "cparser.mly"
                 (BASE_VOLATILE)
# 3636 "cparser.ml"
               : 'only_mod))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gcc_attribute) in
    Obj.repr(
# 774 "cparser.mly"
                     ( BASE_GNU_ATTR _1 )
# 3643 "cparser.ml"
               : 'only_mod))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'only_dec) in
    Obj.repr(
# 777 "cparser.mly"
                (_1)
# 3650 "cparser.ml"
               : 'only_def))
; (fun __caml_parser_env ->
    Obj.repr(
# 781 "cparser.mly"
   (NO_TYPE)
# 3656 "cparser.ml"
               : 'only_dec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'only_dec) in
    Obj.repr(
# 783 "cparser.mly"
   (set_type (PTR NO_TYPE) _2)
# 3663 "cparser.ml"
               : 'only_dec))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'only_dec) in
    Obj.repr(
# 785 "cparser.mly"
   (set_type (RESTRICT_PTR NO_TYPE) _3)
# 3670 "cparser.ml"
               : 'only_dec))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'only_dec) in
    Obj.repr(
# 787 "cparser.mly"
   (set_type (CONST (PTR NO_TYPE)) _3)
# 3677 "cparser.ml"
               : 'only_dec))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'only_dec) in
    Obj.repr(
# 789 "cparser.mly"
   (set_type (VOLATILE (PTR NO_TYPE)) _3)
# 3684 "cparser.ml"
               : 'only_dec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.gnu_attrs) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'only_dec) in
    Obj.repr(
# 791 "cparser.mly"
   (set_type (GNU_TYPE (_2, PTR NO_TYPE)) _3)
# 3692 "cparser.ml"
               : 'only_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'only_dec) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 793 "cparser.mly"
   (set_type (ARRAY (NO_TYPE, smooth_expression _3)) _1)
# 3702 "cparser.ml"
               : 'only_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'only_dec) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 795 "cparser.mly"
   (set_type (ARRAY (NO_TYPE, NOTHING)) _1)
# 3711 "cparser.ml"
               : 'only_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'only_dec) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name list * bool) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 797 "cparser.mly"
   (set_type (PROTO (NO_TYPE, fst _5, snd _5)) _2)
# 3723 "cparser.ml"
               : 'only_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'only_dec) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 799 "cparser.mly"
   (_2)
# 3732 "cparser.ml"
               : 'only_dec))
; (fun __caml_parser_env ->
    Obj.repr(
# 805 "cparser.mly"
             ((VOID, []))
# 3738 "cparser.ml"
               : 'qual_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 806 "cparser.mly"
              ((CHAR NO_SIGN, []))
# 3744 "cparser.ml"
               : 'qual_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 807 "cparser.mly"
              ((INT (NO_SIZE, NO_SIGN), []))
# 3750 "cparser.ml"
               : 'qual_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 808 "cparser.mly"
               ((FLOAT false, []))
# 3756 "cparser.ml"
               : 'qual_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 809 "cparser.mly"
                ((DOUBLE false, []))
# 3762 "cparser.ml"
               : 'qual_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 810 "cparser.mly"
              ((NO_TYPE, [BASE_SIZE LONG]))
# 3768 "cparser.ml"
               : 'qual_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 811 "cparser.mly"
               ((NO_TYPE, [BASE_SIZE SHORT]))
# 3774 "cparser.ml"
               : 'qual_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 812 "cparser.mly"
                ((NO_TYPE, [BASE_SIGN SIGNED]))
# 3780 "cparser.ml"
               : 'qual_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 813 "cparser.mly"
                 ((NO_TYPE, [BASE_SIGN UNSIGNED]))
# 3786 "cparser.ml"
               : 'qual_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'type_name) in
    Obj.repr(
# 817 "cparser.mly"
   (STRUCT (_2, []))
# 3793 "cparser.ml"
               : 'comp_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'field_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 819 "cparser.mly"
   (STRUCT ("", List.rev _3))
# 3802 "cparser.ml"
               : 'comp_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'type_name) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'field_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 821 "cparser.mly"
   (STRUCT (_2, List.rev _4))
# 3812 "cparser.ml"
               : 'comp_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'type_name) in
    Obj.repr(
# 823 "cparser.mly"
   (UNION (_2, []))
# 3819 "cparser.ml"
               : 'comp_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'field_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 825 "cparser.mly"
   (UNION ("", List.rev _3))
# 3828 "cparser.ml"
               : 'comp_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'type_name) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'field_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 827 "cparser.mly"
   (UNION (_2, List.rev _4))
# 3838 "cparser.ml"
               : 'comp_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'type_name) in
    Obj.repr(
# 829 "cparser.mly"
   (ENUM (_2, []))
# 3845 "cparser.ml"
               : 'comp_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'enum_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 831 "cparser.mly"
   (ENUM ("", List.rev _3))
# 3854 "cparser.ml"
               : 'comp_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'type_name) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'enum_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 833 "cparser.mly"
   (ENUM (_2, List.rev _4))
# 3864 "cparser.ml"
               : 'comp_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 836 "cparser.mly"
              (_1)
# 3871 "cparser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 837 "cparser.mly"
                   (_1)
# 3878 "cparser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'enum_name) in
    Obj.repr(
# 839 "cparser.mly"
                         ([_1])
# 3885 "cparser.ml"
               : 'enum_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'enum_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'enum_name) in
    Obj.repr(
# 840 "cparser.mly"
                              (_3::_1)
# 3894 "cparser.ml"
               : 'enum_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 842 "cparser.mly"
                      ((_1, NOTHING))
# 3901 "cparser.ml"
               : 'enum_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 843 "cparser.mly"
                          ((_1, _3))
# 3910 "cparser.ml"
               : 'enum_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 850 "cparser.mly"
   (CONSTANT (CONST_COMPOUND (List.rev _2)))
# 3919 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 852 "cparser.mly"
   (_1)
# 3926 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 856 "cparser.mly"
   ([_1])
# 3933 "cparser.ml"
               : Cabs.expression list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 858 "cparser.mly"
   (_3::_1)
# 3942 "cparser.ml"
               : Cabs.expression list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 860 "cparser.mly"
   (_1)
# 3950 "cparser.ml"
               : Cabs.expression list))
; (fun __caml_parser_env ->
    Obj.repr(
# 864 "cparser.mly"
   (NOTHING)
# 3956 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list) in
    Obj.repr(
# 866 "cparser.mly"
   (smooth_expression _1)
# 3963 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 870 "cparser.mly"
   ([_1])
# 3970 "cparser.ml"
               : Cabs.expression list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 872 "cparser.mly"
   (_3::_1)
# 3979 "cparser.ml"
               : Cabs.expression list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.constant) in
    Obj.repr(
# 876 "cparser.mly"
   (CONSTANT _1)
# 3986 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 878 "cparser.mly"
   (VARIABLE _1)
# 3993 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 880 "cparser.mly"
   (EXPR_SIZEOF _2)
# 4000 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'only_type) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 882 "cparser.mly"
   (TYPE_SIZEOF _3)
# 4009 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 884 "cparser.mly"
   (UNARY (PLUS, _2))
# 4016 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 886 "cparser.mly"
   (UNARY (MINUS, _2))
# 4023 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 888 "cparser.mly"
   (UNARY (MEMOF, _2))
# 4030 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 890 "cparser.mly"
   (UNARY (ADDROF, _2))
# 4037 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 892 "cparser.mly"
   (UNARY (NOT, _2))
# 4044 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 894 "cparser.mly"
   (UNARY (BNOT, _2))
# 4051 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 896 "cparser.mly"
   (UNARY (PREINCR, _2))
# 4058 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression) in
    Obj.repr(
# 898 "cparser.mly"
   (UNARY (POSINCR, _1))
# 4065 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 900 "cparser.mly"
   (UNARY (PREDECR, _2))
# 4072 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression) in
    Obj.repr(
# 902 "cparser.mly"
   (UNARY (POSDECR, _1))
# 4079 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 904 "cparser.mly"
   (MEMBEROFPTR (_1, _3))
# 4087 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 906 "cparser.mly"
   (MEMBEROFPTR (_1, _3))
# 4095 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 908 "cparser.mly"
   (MEMBEROF (_1, _3))
# 4103 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 910 "cparser.mly"
   (MEMBEROF (_1, _3))
# 4111 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : (string * int) * (Cabs.definition list * Cabs.statement)) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 912 "cparser.mly"
   (Clexer.test_gcc(); set_eline _1 (GNU_BODY (snd _2)))
# 4120 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 914 "cparser.mly"
   (set_eline _1 (smooth_expression _2))
# 4129 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'only_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 916 "cparser.mly"
   (set_eline _1 (CAST (_2, _4)))
# 4139 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 918 "cparser.mly"
   (set_eline _2 (CALL (_1, list_expression _3)))
# 4149 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 920 "cparser.mly"
   (INDEX (_1, smooth_expression _3))
# 4159 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 922 "cparser.mly"
   (QUESTION (_1, _3, _5))
# 4170 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 924 "cparser.mly"
   (BINARY(ADD ,_1 , _3))
# 4178 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 926 "cparser.mly"
   (BINARY(SUB ,_1 , _3))
# 4186 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 928 "cparser.mly"
   (BINARY(MUL ,_1 , _3))
# 4194 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 930 "cparser.mly"
   (BINARY(DIV ,_1 , _3))
# 4202 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 932 "cparser.mly"
   (BINARY(MOD ,_1 , _3))
# 4210 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 934 "cparser.mly"
   (BINARY(AND ,_1 , _3))
# 4218 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 936 "cparser.mly"
   (BINARY(OR ,_1 , _3))
# 4226 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 938 "cparser.mly"
   (BINARY(BAND ,_1 , _3))
# 4234 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 940 "cparser.mly"
   (BINARY(BOR ,_1 , _3))
# 4242 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 942 "cparser.mly"
   (BINARY(XOR ,_1 , _3))
# 4250 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 944 "cparser.mly"
   (BINARY(EQ ,_1 , _3))
# 4258 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 946 "cparser.mly"
   (BINARY(NE ,_1 , _3))
# 4266 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 948 "cparser.mly"
   (BINARY(LT ,_1 , _3))
# 4274 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 950 "cparser.mly"
   (BINARY(GT ,_1 , _3))
# 4282 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 952 "cparser.mly"
   (BINARY(LE ,_1 , _3))
# 4290 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 954 "cparser.mly"
   (BINARY(GE ,_1 , _3))
# 4298 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 956 "cparser.mly"
   (BINARY(SHL ,_1 , _3))
# 4306 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 958 "cparser.mly"
   (BINARY(SHR ,_1 , _3))
# 4314 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 960 "cparser.mly"
   (set_eline _2 (BINARY(ASSIGN ,_1 , _3)))
# 4323 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 962 "cparser.mly"
   (set_eline _2 (BINARY(ADD_ASSIGN ,_1 , _3)))
# 4332 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 964 "cparser.mly"
   (set_eline _2 (BINARY(SUB_ASSIGN ,_1 , _3)))
# 4341 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 966 "cparser.mly"
   (set_eline _2 (BINARY(MUL_ASSIGN ,_1 , _3)))
# 4350 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 968 "cparser.mly"
   (set_eline _2 (BINARY(DIV_ASSIGN ,_1 , _3)))
# 4359 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 970 "cparser.mly"
   (set_eline _2 (BINARY(MOD_ASSIGN ,_1 , _3)))
# 4368 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 972 "cparser.mly"
   (set_eline _2 (BINARY(BAND_ASSIGN ,_1 , _3)))
# 4377 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 974 "cparser.mly"
   (set_eline _2 (BINARY(BOR_ASSIGN ,_1 , _3)))
# 4386 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 976 "cparser.mly"
   (set_eline _2 (BINARY(XOR_ASSIGN ,_1 , _3)))
# 4395 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 978 "cparser.mly"
   (set_eline _2 (BINARY(SHL_ASSIGN ,_1 , _3)))
# 4404 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 980 "cparser.mly"
   (set_eline _2 (BINARY(SHR_ASSIGN ,_1 , _3)))
# 4413 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 983 "cparser.mly"
                (CONST_INT _1)
# 4420 "cparser.ml"
               : Cabs.constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 984 "cparser.mly"
                  (CONST_FLOAT _1)
# 4427 "cparser.ml"
               : Cabs.constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 985 "cparser.mly"
                 (CONST_CHAR _1)
# 4434 "cparser.ml"
               : Cabs.constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 986 "cparser.mly"
                    (CONST_STRING _1)
# 4441 "cparser.ml"
               : Cabs.constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 989 "cparser.mly"
                  (_1)
# 4448 "cparser.ml"
               : string))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 990 "cparser.mly"
                            (_1 ^ _2)
# 4456 "cparser.ml"
               : string))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 996 "cparser.mly"
                (Clexer.push_context (); _1)
# 4463 "cparser.ml"
               : 'body_begin))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'opt_locals) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 999 "cparser.mly"
                          ((_1, _2))
# 4471 "cparser.ml"
               : 'body_middle))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'body_begin) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'body_middle) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 1002 "cparser.mly"
                                 (Clexer.pop_context(); (_1, _2))
# 4480 "cparser.ml"
               : (string * int) * (Cabs.definition list * Cabs.statement)))
; (fun __caml_parser_env ->
    Obj.repr(
# 1005 "cparser.mly"
                   ([])
# 4486 "cparser.ml"
               : 'opt_locals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'locals) in
    Obj.repr(
# 1006 "cparser.mly"
                (List.rev _1)
# 4493 "cparser.ml"
               : 'opt_locals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition) in
    Obj.repr(
# 1009 "cparser.mly"
              ([_1])
# 4500 "cparser.ml"
               : 'locals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'locals) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition) in
    Obj.repr(
# 1010 "cparser.mly"
                    (_2::_1)
# 4508 "cparser.ml"
               : 'locals))
; (fun __caml_parser_env ->
    Obj.repr(
# 1013 "cparser.mly"
                   (NOP)
# 4514 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 1014 "cparser.mly"
               (_1)
# 4521 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 1017 "cparser.mly"
                    (_1)
# 4528 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.statement) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 1018 "cparser.mly"
                         (SEQUENCE(_1, _2))
# 4536 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 1022 "cparser.mly"
   (set_line _1 NOP)
# 4543 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 1024 "cparser.mly"
   (set_line _2 (COMPUTATION (smooth_expression _1)))
# 4551 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (string * int) * (Cabs.definition list * Cabs.statement)) in
    Obj.repr(
# 1026 "cparser.mly"
   (set_line (fst _1) (BLOCK (snd _1)))
# 4558 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression list) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 1028 "cparser.mly"
   (set_line _1 (IF (smooth_expression _3, _5, NOP)))
# 4569 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Cabs.expression list) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Cabs.statement) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 1030 "cparser.mly"
   (set_line _1 (IF (smooth_expression _3, _5, set_line _6 _7)))
# 4582 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression list) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 1032 "cparser.mly"
   (set_line _1 (SWITCH (smooth_expression _3, _5)))
# 4593 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression list) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 1034 "cparser.mly"
   (set_line _1 (WHILE (smooth_expression _3, _5)))
# 4604 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Cabs.statement) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string * int) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression list) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 1036 "cparser.mly"
   (set_line _1 (DOWHILE (smooth_expression _5, _2)))
# 4617 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : Cabs.expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : string * int) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : Cabs.expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 1039 "cparser.mly"
   (set_line _1 (FOR (_3, _5, _7, _9)))
# 4632 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 1041 "cparser.mly"
   (LABEL (_1, _3))
# 4641 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 1043 "cparser.mly"
   (set_line _1 (CASE (_2, _4)))
# 4651 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 1045 "cparser.mly"
   (set_line _1 (DEFAULT _3))
# 4660 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 1047 "cparser.mly"
   (set_line _1 (RETURN NOTHING))
# 4668 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 1049 "cparser.mly"
   (set_line _1 (RETURN _2))
# 4677 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 1051 "cparser.mly"
   (set_line _1 BREAK)
# 4685 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 1053 "cparser.mly"
   (set_line _1 CONTINUE)
# 4693 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 1055 "cparser.mly"
   (set_line _1 (GOTO _2))
# 4702 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 1057 "cparser.mly"
   ( ASM _3 )
# 4712 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'gnu_asm_io) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'gnu_asm_io) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'opt_gnu_asm_mods) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 1059 "cparser.mly"
   ( Clexer.test_gcc(); GNU_ASM (_3, List.rev _4, List.rev _5, List.rev _6) )
# 4725 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'gnu_asm_args) in
    Obj.repr(
# 1066 "cparser.mly"
  ( _2 )
# 4733 "cparser.ml"
               : 'gnu_asm_io))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gnu_asm_arg) in
    Obj.repr(
# 1071 "cparser.mly"
  ( [_1] )
# 4740 "cparser.ml"
               : 'gnu_asm_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gnu_asm_args) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gnu_asm_arg) in
    Obj.repr(
# 1073 "cparser.mly"
  ( _3::_1 )
# 4749 "cparser.ml"
               : 'gnu_asm_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 1078 "cparser.mly"
  ( ("", _1, _3) )
# 4759 "cparser.ml"
               : 'gnu_asm_arg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string * int) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 1080 "cparser.mly"
  ( (_2, _4, _6) )
# 4772 "cparser.ml"
               : 'gnu_asm_arg))
; (fun __caml_parser_env ->
    Obj.repr(
# 1085 "cparser.mly"
  ( [] )
# 4778 "cparser.ml"
               : 'opt_gnu_asm_mods))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'gnu_asm_mods) in
    Obj.repr(
# 1087 "cparser.mly"
  ( _2 )
# 4786 "cparser.ml"
               : 'opt_gnu_asm_mods))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1092 "cparser.mly"
  ( [_1] )
# 4793 "cparser.ml"
               : 'gnu_asm_mods))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gnu_asm_mods) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1094 "cparser.mly"
  ( _3::_1 )
# 4802 "cparser.ml"
               : 'gnu_asm_mods))
; (fun __caml_parser_env ->
    Obj.repr(
# 1101 "cparser.mly"
  ( Clexer.test_gcc(); [] )
# 4808 "cparser.ml"
               : 'opt_gcc_attributes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.gnu_attrs) in
    Obj.repr(
# 1103 "cparser.mly"
  ( Clexer.test_gcc(); List.rev _1 )
# 4815 "cparser.ml"
               : 'opt_gcc_attributes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gcc_attribute) in
    Obj.repr(
# 1107 "cparser.mly"
  ( _1 )
# 4822 "cparser.ml"
               : Cabs.gnu_attrs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.gnu_attrs) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'gcc_attribute) in
    Obj.repr(
# 1109 "cparser.mly"
  ( List.append _1 _2 )
# 4830 "cparser.ml"
               : Cabs.gnu_attrs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'opt_gnu_args) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 1113 "cparser.mly"
  ( List.rev _4 )
# 4841 "cparser.ml"
               : 'gcc_attribute))
; (fun __caml_parser_env ->
    Obj.repr(
# 1117 "cparser.mly"
  ( [GNU_EXTENSION] )
# 4847 "cparser.ml"
               : 'gcc_attribute))
; (fun __caml_parser_env ->
    Obj.repr(
# 1119 "cparser.mly"
  ( [GNU_INLINE] )
# 4853 "cparser.ml"
               : 'gcc_attribute))
; (fun __caml_parser_env ->
    Obj.repr(
# 1124 "cparser.mly"
  ( [] )
# 4859 "cparser.ml"
               : 'opt_gnu_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gnu_args) in
    Obj.repr(
# 1126 "cparser.mly"
  ( _1 )
# 4866 "cparser.ml"
               : 'opt_gnu_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gnu_arg) in
    Obj.repr(
# 1131 "cparser.mly"
  ([_1])
# 4873 "cparser.ml"
               : 'gnu_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gnu_args) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gnu_arg) in
    Obj.repr(
# 1133 "cparser.mly"
  (_3::_1)
# 4882 "cparser.ml"
               : 'gnu_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gnu_id) in
    Obj.repr(
# 1138 "cparser.mly"
  ( GNU_ID _1 )
# 4889 "cparser.ml"
               : 'gnu_arg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.constant) in
    Obj.repr(
# 1140 "cparser.mly"
  ( GNU_CST _1 )
# 4896 "cparser.ml"
               : 'gnu_arg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'gnu_id) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'opt_gnu_args) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 1142 "cparser.mly"
  ( GNU_CALL (_1, List.rev _3) )
# 4906 "cparser.ml"
               : 'gnu_arg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1147 "cparser.mly"
  ( _1 )
# 4913 "cparser.ml"
               : 'gnu_id))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.gnu_attrs) in
    Obj.repr(
# 1149 "cparser.mly"
  (
			match _1 with
			  [(Cabs.GNU_ID name)] -> name
			| _ -> assert false
		)
# 4924 "cparser.ml"
               : 'gnu_id))
(* Entry interpret *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry file *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let interpret (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Cabs.definition list)
let file (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Cabs.definition list)
;;
# 1157 "cparser.mly"



# 4957 "cparser.ml"
