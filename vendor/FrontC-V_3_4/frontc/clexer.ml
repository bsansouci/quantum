# 23 "clexer.mll"
 
open Cparser
exception Eof
exception InternalError of string
let version = "Clexer V1.0f 10.8.99 Hugues Cassé"


(*
 * input handle
 *)
type handle = {
	h_interactive: bool;
	h_in_channel: in_channel;
	mutable h_line: string;
	mutable h_buffer: string;
	mutable h_pos: int;
	mutable h_lineno: int;
	h_out_channel: out_channel;
	mutable h_file_name: string;
	h_gcc: bool;
	h_linerec: bool;
}
let current_handle = ref {
		h_interactive = false;
		h_in_channel = stdin;
		h_line = "";
		h_buffer = "";
		h_pos = 0;
		h_lineno = 0;
		h_out_channel = stdout;
		h_file_name = "";
		h_gcc = true;
		h_linerec = false; 
	}

let interactive (h : handle) = h.h_interactive
let in_channel (h : handle) = h.h_in_channel
let line (h : handle) = h.h_line
let buffer (h : handle) = h.h_buffer
let pos (h : handle) = h.h_pos
let real_pos (i : int) (h : handle) = i - h.h_pos
let lineno (h : handle) = h.h_lineno
let out_channel (h : handle) = h.h_out_channel
let file_name (h : handle) = h.h_file_name
let linerec (h: handle) = h.h_linerec
let curfile _ = (!current_handle).h_file_name
let curline _ = (!current_handle).h_lineno
let has_gcc _ = (!current_handle).h_gcc


(*
 * Error handling
 *)
let underline_error (buffer : string) (start : int) (stop : int) =
	let len = String.length buffer in
	let start' = max 0 start in
	let stop' = max 1 stop in
	(
		(if start' > 0 then (String.sub buffer 0 start') else "")
		^ "\027[4m"
		^ (if (stop' - start') <> 0
			then (String.sub buffer start' (stop' - start' ) )
			else ""
		)
		^ "\027[0m"
		^ (if stop' < len then (String.sub buffer stop' (len - stop') ) else "")
	)

let display_error msg token_start token_end =
	output_string (out_channel !current_handle) (
		(if (interactive !current_handle)
			then ""
			else 
				(file_name !current_handle) ^ "["
				^ (string_of_int (lineno !current_handle)) ^ "] "
		)
		^ msg ^ ": "
		^ (underline_error
				(line !current_handle)
				(real_pos token_start !current_handle)
				(real_pos token_end !current_handle)
		)
	);
	flush (out_channel !current_handle)

let display_semantic_error msg =
	display_error msg (pos !current_handle) (pos !current_handle)


let error msg =
	display_error msg (Parsing.symbol_start ()) (Parsing.symbol_end ());
	raise Parsing.Parse_error

let test_gcc _ = if not (!current_handle).h_gcc then  error "forbidden GCC syntax"


(*
** Keyword hashtable
*)
let id token _ = token

module HashString =
struct
	type t = string
	let equal (s1 : t) (s2 : t) = s1 = s2
	let hash (s : t) = Hashtbl.hash s
end
module StringHashtbl = Hashtbl.Make(HashString)
let lexicon = StringHashtbl.create 211
let keywords =
	[
		("auto", id AUTO);
		("const", id CONST); ("__const", id CONST);
		("static", id STATIC);
		("extern", id EXTERN);
		("long", id LONG);
		("short", id SHORT);
		("register", id REGISTER);
		("signed", id SIGNED);
		("unsigned", id UNSIGNED);
		("volatile", id VOLATILE);
		("__restrict", id RESTRICT);
		("restrict", id RESTRICT);	(** Non-supported by GCC ??? *)
		("char", id CHAR);
		("int", id INT);
		("float", id FLOAT);
		("double", id DOUBLE);
		("void", id VOID);
		("enum", id ENUM);
		("struct", id STRUCT);
		("typedef", id TYPEDEF);
		("union", id UNION);
		("break", fun _ -> BREAK (curfile(), curline()));
		("continue", fun _ -> CONTINUE (curfile(), curline()));
		("goto", fun _ -> GOTO (curfile(), curline()));
		("return", fun _ -> RETURN (curfile(), curline()));
		("switch", fun _ -> SWITCH (curfile(), curline()));
		("case", fun _ -> CASE (curfile(), curline()));
		("default", fun _ -> DEFAULT (curfile(), curline()));
		("while", fun _ -> WHILE (curfile(), curline()));
		("do", fun _ -> DO (curfile(), curline()));
		("for", fun _ -> FOR (curfile(), curline()));
		("if", fun _ -> IF (curfile(), curline()));
		("else", fun _ -> ELSE (curfile(), curline()));
		("asm", id ASM);
	]

(*** Specific GNU ***)
let gnu_keywords : (string * (unit -> Cparser.token)) list = [
		("__attribute__", id ATTRIBUTE);
		("__extension__", id EXTENSION);
		("__inline", id INLINE)
	]

let init_lexicon _ =
	let add (key, token) = StringHashtbl.add lexicon key token in
	StringHashtbl.clear lexicon;
	List.iter add keywords;
	if has_gcc ()  then List.iter add gnu_keywords

let add_type name =
	StringHashtbl.add lexicon name (id (NAMED_TYPE name))

let context : string list list ref = ref []

let push_context _ = context := []::!context

let pop_context _ = 
	match !context with
	[] -> raise (InternalError "Empty context stack")
	| con::sub ->
		(context := sub;
		List.iter (fun name -> StringHashtbl.remove lexicon name) con)

let add_identifier name =
	match !context with
	[] -> raise (InternalError "Empty context stack")
	| con::sub ->
		(context := (name::con)::sub;
		StringHashtbl.add lexicon name (id (IDENT name)))


(*
** Useful primitives
*)
let rem_quotes str = String.sub str 1 ((String.length str) - 2)
let scan_ident id =
	try (StringHashtbl.find lexicon id) ()
	with Not_found ->
		IDENT id
(*
** Buffer processor
*)

let set_line num =
	(!current_handle).h_lineno <- num - 1

let set_name name =
	(!current_handle).h_file_name <- name


(*** escape character management ***)
let scan_escape str =
	match str with
	"n" -> "\n"
	| "r" -> "\r"
	| "t" -> "\t"
	| "b" -> "\b"
	| _ -> str
let get_value chr =
	match chr with
	'0'..'9' -> (Char.code chr) - (Char.code '0')
	| 'a'..'z' -> (Char.code chr) - (Char.code 'a') + 10
	| 'A'..'Z' -> (Char.code chr) - (Char.code 'A') + 10
	| _ -> 0
let scan_hex_escape str =
	String.make 1 (Char.chr (
		(get_value (String.get str 0)) * 16
		+ (get_value (String.get str 1))
	))
let scan_oct_escape str =
	String.make 1 (Char.chr (
		(get_value (String.get str 0)) * 64
		+ (get_value (String.get str 1)) * 8
		+ (get_value (String.get str 2))
	))

# 230 "clexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\195\255\196\255\079\000\160\000\200\255\201\255\202\255\
    \203\255\204\255\205\255\206\255\207\255\208\255\209\255\210\255\
    \003\000\076\000\079\000\031\000\245\000\080\000\035\000\081\000\
    \157\000\160\000\109\000\238\000\003\001\041\001\250\255\251\255\
    \252\255\253\255\000\001\240\255\254\255\255\255\114\001\082\001\
    \147\001\254\000\255\000\176\001\000\001\059\001\002\001\017\001\
    \249\255\187\001\217\001\248\001\137\001\002\002\031\002\063\002\
    \067\000\088\000\248\255\125\000\244\255\230\255\055\000\101\000\
    \091\000\003\000\245\255\224\255\243\255\222\255\223\255\242\255\
    \241\255\239\255\214\255\238\255\215\255\237\255\236\255\229\255\
    \159\000\235\255\228\255\162\000\234\255\231\255\133\002\208\002\
    \027\003\102\003\177\003\209\000\254\255\177\000\255\255\019\001\
    \254\255\255\255\035\004\252\255\020\004\254\255\255\255\221\000\
    \214\000\253\255\141\001\252\255\218\000\254\255\255\255\253\255\
    \219\000\030\001\254\255\255\255\031\001\250\255\005\004\255\255\
    \251\255\101\002\124\002\064\004\090\004\254\255\049\004\253\255\
    \023\001\250\255\119\004\255\255\251\255\127\004\145\004\165\004\
    \203\004\254\255\192\004\253\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\058\000\058\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \028\000\030\000\029\000\044\000\042\000\043\000\038\000\036\000\
    \035\000\034\000\039\000\056\000\009\000\009\000\255\255\255\255\
    \255\255\255\255\037\000\255\255\255\255\255\255\255\255\255\255\
    \006\000\009\000\009\000\008\000\008\000\008\000\008\000\009\000\
    \255\255\006\000\255\255\006\000\255\255\006\000\255\255\007\000\
    \007\000\007\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \022\000\255\255\255\255\023\000\255\255\255\255\058\000\058\000\
    \058\000\058\000\057\000\255\255\255\255\001\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\002\000\255\255\255\255\002\000\
    \002\000\255\255\255\255\255\255\003\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\005\000\255\255\
    \255\255\004\000\003\000\004\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\005\000\255\255\255\255\004\000\003\000\004\000\
    \255\255\255\255\255\255\255\255";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\255\255\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\000\000\000\000\255\255\255\255\
    \255\255\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\000\000\000\000\255\255\000\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\092\000\000\000\255\255\000\000\096\000\
    \000\000\000\000\099\000\000\000\255\255\000\000\000\000\255\255\
    \255\255\000\000\107\000\000\000\112\000\000\000\000\000\000\000\
    \112\000\114\000\000\000\000\000\117\000\000\000\120\000\000\000\
    \000\000\255\255\255\255\255\255\255\255\000\000\255\255\000\000\
    \129\000\000\000\132\000\000\000\000\000\255\255\255\255\255\255\
    \255\255\000\000\255\255\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\033\000\033\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \033\000\026\000\030\000\032\000\066\000\022\000\020\000\031\000\
    \008\000\007\000\023\000\025\000\005\000\024\000\027\000\034\000\
    \029\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\014\000\006\000\018\000\016\000\017\000\015\000\
    \085\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\010\000\078\000\009\000\019\000\003\000\
    \073\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\004\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\012\000\021\000\011\000\013\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\082\000\083\000\080\000\079\000\075\000\072\000\058\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\061\000\060\000\063\000\058\000\003\000\058\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\070\000\067\000\074\000\058\000\064\000\065\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\071\000\069\000\081\000\068\000\062\000\084\000\
    \094\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\093\000\111\000\111\000\000\000\003\000\
    \002\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\086\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\076\000\059\000\097\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \115\000\105\000\037\000\105\000\040\000\040\000\040\000\036\000\
    \040\000\040\000\077\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\035\000\131\000\040\000\
    \000\000\119\000\000\000\039\000\039\000\039\000\000\000\039\000\
    \039\000\105\000\047\000\105\000\046\000\000\000\000\000\042\000\
    \000\000\000\000\000\000\000\000\047\000\000\000\039\000\040\000\
    \041\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\028\000\028\000\039\000\039\000\039\000\000\000\039\000\
    \039\000\040\000\047\000\000\000\046\000\000\000\039\000\042\000\
    \000\000\000\000\000\000\130\000\047\000\042\000\039\000\000\000\
    \041\000\000\000\000\000\118\000\000\000\054\000\041\000\054\000\
    \039\000\038\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\000\000\000\000\039\000\000\000\
    \046\000\000\000\000\000\000\000\000\000\042\000\109\000\110\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\041\000\000\000\
    \039\000\038\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\000\000\109\000\000\000\108\000\
    \046\000\000\000\000\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\000\000\000\000\000\000\
    \000\000\255\255\000\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\048\000\255\255\255\255\000\000\000\000\040\000\048\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \028\000\028\000\000\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\039\000\000\000\000\000\
    \000\000\048\000\000\000\000\000\045\000\000\000\000\000\048\000\
    \050\000\048\000\000\000\000\000\052\000\044\000\052\000\048\000\
    \000\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\255\255\000\000\039\000\000\000\255\255\
    \000\000\000\000\000\000\000\000\045\000\000\000\255\255\255\255\
    \050\000\048\000\000\000\000\000\000\000\044\000\000\000\048\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\000\000\000\000\048\000\000\000\
    \000\000\000\000\000\000\000\000\048\000\000\000\000\000\000\000\
    \048\000\000\000\000\000\000\000\000\000\000\000\048\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\000\000\000\000\000\000\000\000\000\000\048\000\000\000\
    \000\000\000\000\000\000\000\000\048\000\000\000\000\000\000\000\
    \048\000\000\000\000\000\000\000\000\000\000\000\048\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\000\000\000\000\
    \000\000\000\000\000\000\057\000\000\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\056\000\126\000\126\000\126\000\
    \126\000\126\000\126\000\126\000\126\000\000\000\000\000\000\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\000\000\000\000\
    \000\000\000\000\000\000\057\000\126\000\126\000\126\000\126\000\
    \126\000\126\000\126\000\126\000\056\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \000\000\000\000\000\000\000\000\003\000\000\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\087\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\000\000\000\000\000\000\000\000\003\000\
    \000\000\003\000\003\000\003\000\003\000\088\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\000\000\000\000\
    \000\000\000\000\003\000\000\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\089\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\000\000\000\000\000\000\000\000\003\000\000\000\003\000\
    \003\000\003\000\003\000\003\000\090\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\000\000\000\000\000\000\000\000\
    \003\000\000\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\101\000\102\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\122\000\121\000\121\000\
    \121\000\121\000\121\000\121\000\121\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\101\000\100\000\100\000\100\000\100\000\
    \100\000\100\000\100\000\100\000\100\000\100\000\000\000\000\000\
    \000\000\000\000\000\000\100\000\100\000\100\000\100\000\100\000\
    \100\000\100\000\100\000\100\000\100\000\123\000\000\000\000\000\
    \104\000\127\000\127\000\127\000\127\000\127\000\127\000\127\000\
    \127\000\103\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \124\000\124\000\124\000\124\000\124\000\124\000\124\000\124\000\
    \124\000\124\000\000\000\000\000\000\000\123\000\000\000\000\000\
    \104\000\124\000\124\000\124\000\124\000\124\000\124\000\000\000\
    \000\000\103\000\125\000\125\000\125\000\125\000\125\000\125\000\
    \125\000\125\000\125\000\125\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\125\000\125\000\125\000\125\000\125\000\
    \125\000\124\000\124\000\124\000\124\000\124\000\124\000\134\000\
    \133\000\133\000\133\000\133\000\133\000\133\000\133\000\138\000\
    \138\000\138\000\138\000\138\000\138\000\138\000\138\000\000\000\
    \000\000\000\000\000\000\125\000\125\000\125\000\125\000\125\000\
    \125\000\138\000\138\000\138\000\138\000\138\000\138\000\138\000\
    \138\000\000\000\000\000\000\000\000\000\000\000\000\000\135\000\
    \000\000\000\000\000\000\000\000\000\000\136\000\136\000\136\000\
    \136\000\136\000\136\000\136\000\136\000\136\000\136\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\136\000\136\000\
    \136\000\136\000\136\000\136\000\000\000\000\000\000\000\135\000\
    \139\000\139\000\139\000\139\000\139\000\139\000\139\000\139\000\
    \000\000\000\000\000\000\137\000\137\000\137\000\137\000\137\000\
    \137\000\137\000\137\000\137\000\137\000\255\255\136\000\136\000\
    \136\000\136\000\136\000\136\000\137\000\137\000\137\000\137\000\
    \137\000\137\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\137\000\137\000\137\000\137\000\
    \137\000\137\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\065\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\019\000\000\000\000\000\000\000\
    \022\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\017\000\017\000\018\000\018\000\021\000\023\000\056\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\026\000\059\000\062\000\057\000\003\000\056\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\024\000\025\000\021\000\057\000\063\000\064\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\024\000\024\000\080\000\025\000\026\000\083\000\
    \093\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\091\000\108\000\112\000\255\255\004\000\
    \000\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\020\000\027\000\095\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \113\000\103\000\034\000\104\000\041\000\042\000\044\000\034\000\
    \046\000\028\000\020\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\034\000\128\000\047\000\
    \255\255\116\000\255\255\041\000\042\000\044\000\255\255\046\000\
    \028\000\103\000\041\000\104\000\044\000\255\255\255\255\028\000\
    \255\255\255\255\255\255\255\255\042\000\255\255\047\000\029\000\
    \028\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\041\000\042\000\044\000\255\255\046\000\
    \028\000\045\000\041\000\255\255\044\000\255\255\029\000\028\000\
    \255\255\255\255\255\255\128\000\042\000\029\000\047\000\255\255\
    \028\000\255\255\255\255\116\000\255\255\039\000\029\000\039\000\
    \045\000\029\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\255\255\255\255\029\000\255\255\
    \045\000\255\255\255\255\255\255\255\255\029\000\106\000\106\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\029\000\255\255\
    \045\000\029\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\038\000\038\000\255\255\106\000\255\255\106\000\
    \045\000\255\255\255\255\038\000\038\000\038\000\038\000\038\000\
    \038\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\255\255\255\255\255\255\
    \255\255\091\000\255\255\038\000\038\000\038\000\038\000\038\000\
    \038\000\040\000\108\000\112\000\255\255\255\255\043\000\040\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\043\000\255\255\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\043\000\255\255\255\255\
    \255\255\040\000\255\255\255\255\043\000\255\255\255\255\040\000\
    \049\000\049\000\255\255\255\255\050\000\043\000\050\000\049\000\
    \255\255\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\095\000\255\255\043\000\255\255\128\000\
    \255\255\255\255\255\255\255\255\043\000\255\255\113\000\116\000\
    \049\000\049\000\255\255\255\255\255\255\043\000\255\255\049\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\255\255\255\255\051\000\255\255\
    \255\255\255\255\255\255\255\255\051\000\255\255\255\255\255\255\
    \053\000\255\255\255\255\255\255\255\255\255\255\053\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\255\255\255\255\255\255\255\255\255\255\051\000\255\255\
    \255\255\255\255\255\255\255\255\051\000\255\255\255\255\255\255\
    \053\000\255\255\255\255\255\255\255\255\255\255\053\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \055\000\055\000\055\000\055\000\055\000\055\000\255\255\255\255\
    \255\255\255\255\255\255\055\000\255\255\106\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\055\000\121\000\121\000\121\000\
    \121\000\121\000\121\000\121\000\121\000\255\255\255\255\255\255\
    \055\000\055\000\055\000\055\000\055\000\055\000\255\255\255\255\
    \255\255\255\255\255\255\055\000\122\000\122\000\122\000\122\000\
    \122\000\122\000\122\000\122\000\055\000\086\000\086\000\086\000\
    \086\000\086\000\086\000\086\000\086\000\086\000\086\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\086\000\086\000\
    \086\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
    \086\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
    \086\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
    \255\255\255\255\255\255\255\255\086\000\255\255\086\000\086\000\
    \086\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
    \086\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
    \086\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
    \087\000\087\000\087\000\087\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\087\000\087\000\087\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\087\000\087\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\087\000\087\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\087\000\255\255\255\255\255\255\255\255\087\000\
    \255\255\087\000\087\000\087\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\087\000\087\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\087\000\087\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\087\000\088\000\088\000\088\000\088\000\088\000\
    \088\000\088\000\088\000\088\000\088\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\088\000\088\000\088\000\088\000\
    \088\000\088\000\088\000\088\000\088\000\088\000\088\000\088\000\
    \088\000\088\000\088\000\088\000\088\000\088\000\088\000\088\000\
    \088\000\088\000\088\000\088\000\088\000\088\000\255\255\255\255\
    \255\255\255\255\088\000\255\255\088\000\088\000\088\000\088\000\
    \088\000\088\000\088\000\088\000\088\000\088\000\088\000\088\000\
    \088\000\088\000\088\000\088\000\088\000\088\000\088\000\088\000\
    \088\000\088\000\088\000\088\000\088\000\088\000\089\000\089\000\
    \089\000\089\000\089\000\089\000\089\000\089\000\089\000\089\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\089\000\
    \089\000\089\000\089\000\089\000\089\000\089\000\089\000\089\000\
    \089\000\089\000\089\000\089\000\089\000\089\000\089\000\089\000\
    \089\000\089\000\089\000\089\000\089\000\089\000\089\000\089\000\
    \089\000\255\255\255\255\255\255\255\255\089\000\255\255\089\000\
    \089\000\089\000\089\000\089\000\089\000\089\000\089\000\089\000\
    \089\000\089\000\089\000\089\000\089\000\089\000\089\000\089\000\
    \089\000\089\000\089\000\089\000\089\000\089\000\089\000\089\000\
    \089\000\090\000\090\000\090\000\090\000\090\000\090\000\090\000\
    \090\000\090\000\090\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\090\000\090\000\090\000\090\000\090\000\090\000\
    \090\000\090\000\090\000\090\000\090\000\090\000\090\000\090\000\
    \090\000\090\000\090\000\090\000\090\000\090\000\090\000\090\000\
    \090\000\090\000\090\000\090\000\255\255\255\255\255\255\255\255\
    \090\000\255\255\090\000\090\000\090\000\090\000\090\000\090\000\
    \090\000\090\000\090\000\090\000\090\000\090\000\090\000\090\000\
    \090\000\090\000\090\000\090\000\090\000\090\000\090\000\090\000\
    \090\000\090\000\090\000\090\000\098\000\098\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\118\000\118\000\118\000\
    \118\000\118\000\118\000\118\000\118\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\098\000\100\000\100\000\100\000\100\000\
    \100\000\100\000\100\000\100\000\100\000\100\000\255\255\255\255\
    \255\255\255\255\255\255\098\000\098\000\098\000\098\000\098\000\
    \098\000\098\000\098\000\098\000\098\000\118\000\255\255\255\255\
    \100\000\126\000\126\000\126\000\126\000\126\000\126\000\126\000\
    \126\000\100\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \123\000\123\000\123\000\123\000\123\000\123\000\123\000\123\000\
    \123\000\123\000\255\255\255\255\255\255\118\000\255\255\255\255\
    \100\000\123\000\123\000\123\000\123\000\123\000\123\000\255\255\
    \255\255\100\000\124\000\124\000\124\000\124\000\124\000\124\000\
    \124\000\124\000\124\000\124\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\124\000\124\000\124\000\124\000\124\000\
    \124\000\123\000\123\000\123\000\123\000\123\000\123\000\130\000\
    \130\000\130\000\130\000\130\000\130\000\130\000\130\000\133\000\
    \133\000\133\000\133\000\133\000\133\000\133\000\133\000\255\255\
    \255\255\255\255\255\255\124\000\124\000\124\000\124\000\124\000\
    \124\000\134\000\134\000\134\000\134\000\134\000\134\000\134\000\
    \134\000\255\255\255\255\255\255\255\255\255\255\255\255\130\000\
    \255\255\255\255\255\255\255\255\255\255\135\000\135\000\135\000\
    \135\000\135\000\135\000\135\000\135\000\135\000\135\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\135\000\135\000\
    \135\000\135\000\135\000\135\000\255\255\255\255\255\255\130\000\
    \138\000\138\000\138\000\138\000\138\000\138\000\138\000\138\000\
    \255\255\255\255\255\255\136\000\136\000\136\000\136\000\136\000\
    \136\000\136\000\136\000\136\000\136\000\118\000\135\000\135\000\
    \135\000\135\000\135\000\135\000\136\000\136\000\136\000\136\000\
    \136\000\136\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\098\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\136\000\136\000\136\000\136\000\
    \136\000\136\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\130\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec initial lexbuf =
    __ocaml_lex_initial_rec lexbuf 0
and __ocaml_lex_initial_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 280 "clexer.mll"
               (let _ = comment lexbuf in initial lexbuf)
# 684 "clexer.ml"

  | 1 ->
# 281 "clexer.mll"
           (test_gcc (); let _ = line_comment lexbuf in initial lexbuf )
# 689 "clexer.ml"

  | 2 ->
# 282 "clexer.mll"
            (initial lexbuf)
# 694 "clexer.ml"

  | 3 ->
# 283 "clexer.mll"
           (line lexbuf)
# 699 "clexer.ml"

  | 4 ->
# 285 "clexer.mll"
           (CST_CHAR (chr lexbuf))
# 704 "clexer.ml"

  | 5 ->
# 286 "clexer.mll"
           (CST_STRING (str lexbuf))
# 709 "clexer.ml"

  | 6 ->
# 287 "clexer.mll"
              (CST_FLOAT (Lexing.lexeme lexbuf))
# 714 "clexer.ml"

  | 7 ->
# 288 "clexer.mll"
             (CST_INT (Lexing.lexeme lexbuf))
# 719 "clexer.ml"

  | 8 ->
# 289 "clexer.mll"
             (CST_INT (Lexing.lexeme lexbuf))
# 724 "clexer.ml"

  | 9 ->
# 290 "clexer.mll"
             (CST_INT (Lexing.lexeme lexbuf))
# 729 "clexer.ml"

  | 10 ->
# 292 "clexer.mll"
              (EOF)
# 734 "clexer.ml"

  | 11 ->
# 293 "clexer.mll"
            (ELLIPSIS(curfile(), curline()))
# 739 "clexer.ml"

  | 12 ->
# 294 "clexer.mll"
           (PLUS_EQ(curfile(), curline()))
# 744 "clexer.ml"

  | 13 ->
# 295 "clexer.mll"
           (MINUS_EQ(curfile(), curline()))
# 749 "clexer.ml"

  | 14 ->
# 296 "clexer.mll"
           (STAR_EQ(curfile(), curline()))
# 754 "clexer.ml"

  | 15 ->
# 297 "clexer.mll"
           (SLASH_EQ(curfile(), curline()))
# 759 "clexer.ml"

  | 16 ->
# 298 "clexer.mll"
           (PERCENT_EQ(curfile(), curline()))
# 764 "clexer.ml"

  | 17 ->
# 299 "clexer.mll"
           (PIPE_EQ(curfile(), curline()))
# 769 "clexer.ml"

  | 18 ->
# 300 "clexer.mll"
           (AND_EQ(curfile(), curline()))
# 774 "clexer.ml"

  | 19 ->
# 301 "clexer.mll"
           (CIRC_EQ(curfile(), curline()))
# 779 "clexer.ml"

  | 20 ->
# 302 "clexer.mll"
            (INF_INF_EQ(curfile(), curline()))
# 784 "clexer.ml"

  | 21 ->
# 303 "clexer.mll"
            (SUP_SUP_EQ(curfile(), curline()))
# 789 "clexer.ml"

  | 22 ->
# 304 "clexer.mll"
           (INF_INF)
# 794 "clexer.ml"

  | 23 ->
# 305 "clexer.mll"
           (SUP_SUP)
# 799 "clexer.ml"

  | 24 ->
# 306 "clexer.mll"
           (EQ_EQ)
# 804 "clexer.ml"

  | 25 ->
# 307 "clexer.mll"
           (EXCLAM_EQ)
# 809 "clexer.ml"

  | 26 ->
# 308 "clexer.mll"
           (INF_EQ)
# 814 "clexer.ml"

  | 27 ->
# 309 "clexer.mll"
           (SUP_EQ)
# 819 "clexer.ml"

  | 28 ->
# 310 "clexer.mll"
           (EQ(curfile(), curline()))
# 824 "clexer.ml"

  | 29 ->
# 311 "clexer.mll"
           (INF)
# 829 "clexer.ml"

  | 30 ->
# 312 "clexer.mll"
           (SUP)
# 834 "clexer.ml"

  | 31 ->
# 313 "clexer.mll"
           (PLUS_PLUS)
# 839 "clexer.ml"

  | 32 ->
# 314 "clexer.mll"
           (MINUS_MINUS)
# 844 "clexer.ml"

  | 33 ->
# 315 "clexer.mll"
           (ARROW)
# 849 "clexer.ml"

  | 34 ->
# 316 "clexer.mll"
           (PLUS)
# 854 "clexer.ml"

  | 35 ->
# 317 "clexer.mll"
           (MINUS)
# 859 "clexer.ml"

  | 36 ->
# 318 "clexer.mll"
           (STAR)
# 864 "clexer.ml"

  | 37 ->
# 319 "clexer.mll"
           (SLASH)
# 869 "clexer.ml"

  | 38 ->
# 320 "clexer.mll"
           (PERCENT)
# 874 "clexer.ml"

  | 39 ->
# 321 "clexer.mll"
           (EXCLAM)
# 879 "clexer.ml"

  | 40 ->
# 322 "clexer.mll"
           (AND_AND)
# 884 "clexer.ml"

  | 41 ->
# 323 "clexer.mll"
           (PIPE_PIPE)
# 889 "clexer.ml"

  | 42 ->
# 324 "clexer.mll"
           (AND)
# 894 "clexer.ml"

  | 43 ->
# 325 "clexer.mll"
           (PIPE)
# 899 "clexer.ml"

  | 44 ->
# 326 "clexer.mll"
           (CIRC)
# 904 "clexer.ml"

  | 45 ->
# 327 "clexer.mll"
           (QUEST(curfile(), curline()))
# 909 "clexer.ml"

  | 46 ->
# 328 "clexer.mll"
           (COLON(curfile(), curline()))
# 914 "clexer.ml"

  | 47 ->
# 329 "clexer.mll"
           (TILDE)
# 919 "clexer.ml"

  | 48 ->
# 331 "clexer.mll"
           (LBRACE(curfile(), curline()))
# 924 "clexer.ml"

  | 49 ->
# 332 "clexer.mll"
           (RBRACE(curfile(), curline()))
# 929 "clexer.ml"

  | 50 ->
# 333 "clexer.mll"
           (LBRACKET(curfile(), curline()))
# 934 "clexer.ml"

  | 51 ->
# 334 "clexer.mll"
           (RBRACKET(curfile(), curline()))
# 939 "clexer.ml"

  | 52 ->
# 335 "clexer.mll"
           (LPAREN(curfile(), curline()))
# 944 "clexer.ml"

  | 53 ->
# 336 "clexer.mll"
           (RPAREN(curfile(), curline()))
# 949 "clexer.ml"

  | 54 ->
# 337 "clexer.mll"
           (SEMICOLON(curfile(), curline()))
# 954 "clexer.ml"

  | 55 ->
# 338 "clexer.mll"
           (COMMA(curfile(), curline()))
# 959 "clexer.ml"

  | 56 ->
# 339 "clexer.mll"
           (DOT)
# 964 "clexer.ml"

  | 57 ->
# 340 "clexer.mll"
              (SIZEOF)
# 969 "clexer.ml"

  | 58 ->
# 341 "clexer.mll"
            (scan_ident (Lexing.lexeme lexbuf))
# 974 "clexer.ml"

  | 59 ->
# 343 "clexer.mll"
           (EOF)
# 979 "clexer.ml"

  | 60 ->
# 344 "clexer.mll"
         (display_error
								"Invalid symbol"
								(Lexing.lexeme_start lexbuf)
								(Lexing.lexeme_end lexbuf);
							initial lexbuf)
# 988 "clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_initial_rec lexbuf __ocaml_lex_state

and comment lexbuf =
    __ocaml_lex_comment_rec lexbuf 91
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 350 "clexer.mll"
               (())
# 1000 "clexer.ml"

  | 1 ->
# 351 "clexer.mll"
           (comment lexbuf)
# 1005 "clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

and line_comment lexbuf =
    __ocaml_lex_line_comment_rec lexbuf 95
and __ocaml_lex_line_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 354 "clexer.mll"
               (())
# 1017 "clexer.ml"

  | 1 ->
# 355 "clexer.mll"
           (line_comment lexbuf)
# 1022 "clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_line_comment_rec lexbuf __ocaml_lex_state

and line lexbuf =
    __ocaml_lex_line_rec lexbuf 98
and __ocaml_lex_line_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 359 "clexer.mll"
              (initial lexbuf)
# 1034 "clexer.ml"

  | 1 ->
# 360 "clexer.mll"
            (line lexbuf)
# 1039 "clexer.ml"

  | 2 ->
# 361 "clexer.mll"
             (set_line (int_of_string (Lexing.lexeme lexbuf));
							file lexbuf)
# 1045 "clexer.ml"

  | 3 ->
# 363 "clexer.mll"
         (endline lexbuf)
# 1050 "clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_line_rec lexbuf __ocaml_lex_state

and file lexbuf =
    __ocaml_lex_file_rec lexbuf 106
and __ocaml_lex_file_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 365 "clexer.mll"
               (initial lexbuf)
# 1062 "clexer.ml"

  | 1 ->
# 366 "clexer.mll"
            (file lexbuf)
# 1067 "clexer.ml"

  | 2 ->
# 367 "clexer.mll"
                     (set_name (rem_quotes (Lexing.lexeme lexbuf));
							endline lexbuf)
# 1073 "clexer.ml"

  | 3 ->
# 369 "clexer.mll"
         (endline lexbuf)
# 1078 "clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_file_rec lexbuf __ocaml_lex_state

and endline lexbuf =
    __ocaml_lex_endline_rec lexbuf 113
and __ocaml_lex_endline_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 371 "clexer.mll"
                (initial lexbuf)
# 1090 "clexer.ml"

  | 1 ->
# 372 "clexer.mll"
         (endline lexbuf)
# 1095 "clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_endline_rec lexbuf __ocaml_lex_state

and str lexbuf =
    __ocaml_lex_str_rec lexbuf 116
and __ocaml_lex_str_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 375 "clexer.mll"
              ("")
# 1107 "clexer.ml"

  | 1 ->
# 376 "clexer.mll"
                (let cur = scan_hex_escape (String.sub
							(Lexing.lexeme lexbuf) 2 2) in cur ^ (str lexbuf))
# 1113 "clexer.ml"

  | 2 ->
# 378 "clexer.mll"
                (let cur = scan_oct_escape (String.sub
							(Lexing.lexeme lexbuf) 1 3) in cur ^ (str lexbuf))
# 1119 "clexer.ml"

  | 3 ->
# 380 "clexer.mll"
            ((String.make 1 (Char.chr 0)) ^ (str lexbuf))
# 1124 "clexer.ml"

  | 4 ->
# 381 "clexer.mll"
             (let cur = scan_escape (String.sub
							(Lexing.lexeme lexbuf) 1 1) in cur ^ (str lexbuf))
# 1130 "clexer.ml"

  | 5 ->
# 383 "clexer.mll"
         (let cur = Lexing.lexeme lexbuf in cur ^  (str lexbuf))
# 1135 "clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_str_rec lexbuf __ocaml_lex_state

and chr lexbuf =
    __ocaml_lex_chr_rec lexbuf 128
and __ocaml_lex_chr_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 386 "clexer.mll"
              ("")
# 1147 "clexer.ml"

  | 1 ->
# 387 "clexer.mll"
                (let cur = scan_hex_escape (String.sub
							(Lexing.lexeme lexbuf) 2 2) in cur ^ (chr lexbuf))
# 1153 "clexer.ml"

  | 2 ->
# 389 "clexer.mll"
                (let cur = scan_oct_escape (String.sub
							(Lexing.lexeme lexbuf) 1 3) in cur ^ (chr lexbuf))
# 1159 "clexer.ml"

  | 3 ->
# 391 "clexer.mll"
            ((String.make 1 (Char.chr 0)) ^ (chr lexbuf))
# 1164 "clexer.ml"

  | 4 ->
# 392 "clexer.mll"
             (let cur = scan_escape (String.sub
							(Lexing.lexeme lexbuf) 1 1) in cur ^ (chr lexbuf))
# 1170 "clexer.ml"

  | 5 ->
# 394 "clexer.mll"
         (let cur = Lexing.lexeme lexbuf in cur ^ (chr lexbuf))
# 1175 "clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_chr_rec lexbuf __ocaml_lex_state

;;

# 396 "clexer.mll"
 

(*** get_buffer ***)
let get_buffer (hr : handle ref) (dst : string) (len : int) : int =
	(*let (inter, chan, line, buffer, pos, lineno, out, name) = !hr in*)
	let h = !hr in
	try
		let (bufferp, linep, posp, linenop) =
			if h.h_buffer <> ""
			then (h.h_buffer, h.h_line , h.h_pos, h.h_lineno)
			else
				let buffer = (input_line h.h_in_channel) ^ "\n" in
				(
					buffer,
					(if h.h_interactive then h.h_line ^ buffer else buffer),
					(if h.h_interactive then h.h_pos else h.h_pos + (String.length h.h_line)),
					h.h_lineno + 1
				) in
		(*let _ = print_endline ("-->" ^ linep) in*)
		let bufl = String.length bufferp in
		let lenp = min len bufl in
		let buffers = if bufl = lenp
			then ""
			else String.sub bufferp lenp (bufl - lenp) in
		begin
			String.blit bufferp 0 dst 0 lenp;
			h.h_line <- linep;
			h.h_buffer <- buffers;
			h.h_pos <- posp;
			h.h_lineno <- linenop;
			lenp
		end
	with End_of_file -> 0


(* init: handle -> ()
**	Initialize lexer.
*)
let init hdl =
	init_lexicon ();
	current_handle := hdl 

# 1225 "clexer.ml"
